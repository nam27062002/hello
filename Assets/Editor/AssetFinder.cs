// MonoBehaviourTemplateEditor.cs
// Hungry Dragon
// 
// Created by Alger Ortín Castellví on DD/MM/2016.
// Copyright (c) 2016 Ubisoft. All rights reserved.

//----------------------------------------------------------------------//
// INCLUDES																//
//----------------------------------------------------------------------//
using UnityEngine;
using UnityEditor;
using System.Collections.Generic;
using System.IO;

//----------------------------------------------------------------------//
// CLASSES																//
//----------------------------------------------------------------------//
/// <summary>
/// Custom editor window.
/// </summary>
public class AssetFinder : EditorWindow {
	//------------------------------------------------------------------//
	// CONSTANTS														//
	//------------------------------------------------------------------//

	//------------------------------------------------------------------//
	// MEMBERS AND PROPERTIES											//
	//------------------------------------------------------------------//
	// Window instance
	private static AssetFinder m_instance = null;
	public static AssetFinder instance {
		get {
			if(m_instance == null) {
				m_instance = (AssetFinder)EditorWindow.GetWindow(typeof(AssetFinder));
			}
			return m_instance;
		}
	}

    //------------------------------------------------------------------------//
    // Find any asset type in Content browser
    //------------------------------------------------------------------------//
    public static void FindAssetInContent<T>(string path, out T[] assetList) where T : UnityEngine.Object
    {
        List<T> objList = new List<T>();

        //        string[] fileList = Directory.GetFiles(path, "*", SearchOption.AllDirectories);
        string typeName = typeof(T).ToString();
        typeName = typeName.Contains("UnityEngine") ? typeName.Replace("UnityEngine.", "") : typeName;
        string filter = "t:" + typeName;
        Debug.Log("filter: " + filter);
        string[] guids = AssetDatabase.FindAssets(filter);

        foreach (string guid in guids)
        {
            string assetPath = AssetDatabase.GUIDToAssetPath(guid);

            T asset = AssetDatabase.LoadAssetAtPath<T>(assetPath);

            if (asset != null)
            {
                objList.Add(asset);
            }
        }

        assetList = objList.ToArray();
    }

    //------------------------------------------------------------------------//
    // Find any asset type in Content browser
    //------------------------------------------------------------------------//
    public static void FindAssetInScene<T>(out T[] assetList, bool _includeInactive = false) where T : UnityEngine.Object
    {
        //        assetList = Object.FindObjectsOfType(typeof(T)) as T[];
        if (_includeInactive)
        {
            assetList = GameObjectExt.FindObjectsOfType<T>(true).ToArray();
        }
        else
        {
            assetList = Object.FindObjectsOfType(typeof(T)) as T[];
        }
    }


    /// <summary>
    /// Remove unless collision data
    /// </summary>
    /// 
    [MenuItem("Hungry Dragon/Tools/Remove unless collision data")]
    public static void RemoveUnlessCollisionData()
    {
        Mesh[] meshList;
        FindAssetInScene<Mesh>(out meshList);
//        Undo.RecordObjects(meshList, "Regenerate scene colliders");

        for (int c = 0; c < meshList.Length; c++)
        {
            if (meshList[c].name == "PolyMesh_Autogenerated_Collider")
            {
                Undo.DestroyObjectImmediate(meshList[c]);
//                DestroyImmediate(meshList[c]);
            } else
            if (meshList[c].name == "PolyMesh_Autogenerated_Mesh")
            {
                Undo.DestroyObjectImmediate(meshList[c]);
                //                DestroyImmediate(meshList[c]);
            }
        }

        PolyMesh[] gameobjList;

        FindAssetInScene<PolyMesh>(out gameobjList, true);
//        Undo.RecordObjects(gameobjList, "Regenerate scene colliders");
        foreach (PolyMesh obj in gameobjList)
        {
            //            Undo.RecordObject(obj.gameObject, "record gameobject");
            //            obj.RebuildMesh(true);
            //            if (meshFilter != null)
            //            {
            //                Undo.DestroyObjectImmediate(meshFilter);
            //            }

            obj.RebuildMesh();
/*
            MeshFilter meshFilter = obj.gameObject.GetComponent<MeshFilter>();

            MeshCollider meshCollider = obj.gameObject.GetComponent<MeshCollider>();

            meshCollider.sharedMesh = null;
            meshCollider.sharedMesh = meshFilter.mesh;
*/
            //            if (meshRenderer != null)
            //            {
            //                Undo.DestroyObjectImmediate(meshRenderer);
            //            }

        }
    }


    /// <summary>
    /// Static Batching disable editor tool
    /// </summary>
    /// 
    [MenuItem("Hungry Dragon/Tools/Static Batching disable")]
    public static void SceneStaticBatchingDisable()
    {
        GameObject[] gameobjList;
        FindAssetInScene<GameObject>(out gameobjList);
        Undo.RecordObjects(gameobjList, "Disable static batching");
        foreach (GameObject obj in gameobjList)
        {
            StaticEditorFlags staticFlags = GameObjectUtility.GetStaticEditorFlags(obj);
            staticFlags &= ~(StaticEditorFlags.BatchingStatic | StaticEditorFlags.NavigationStatic | StaticEditorFlags.OffMeshLinkGeneration | StaticEditorFlags.ReflectionProbeStatic);
            GameObjectUtility.SetStaticEditorFlags(obj, staticFlags);
        }
    }


    /// <summary>
    /// Select preloaded audioclips
    /// </summary>
    [MenuItem("Hungry Dragon/Tools/Select preloaded audioclips")]
    public static void SelectPreloadedAudioClips()
    {
        List<AudioClip> fList = new List<AudioClip>();
        AudioClip[] audioList;
        FindAssetInContent<AudioClip>(Directory.GetCurrentDirectory() + "\\Assets", out audioList);
        foreach(AudioClip clip in audioList)
        {
            if (clip.preloadAudioData)
            {
                fList.Add(clip);
            }
        }

        Selection.objects = fList.ToArray();
    }


    /// <summary>
    /// Resets all shader keywords stored in materials or material selection
    /// </summary>
    [MenuItem("Hungry Dragon/Tools/Material keyword finder")]
    public static void MaterialKeywordFinder()
    {
        Debug.Log("Obtaining material list");

//        EditorUtility.("Material keyword reset", "Obtaining Material list ...", "");

        Material[] materialList;
        FindAssetInContent<Material>(Directory.GetCurrentDirectory() + "\\Assets", out materialList);
        int count = 0;

//        AssetDatabase.StartAssetEditing();
        for (int c = 0; c <materialList.Length; c++)
        {
            foreach (string keyword in materialList[c].shaderKeywords)
            {
                if (keyword == keywordToFind)
                {
                    count++;
                    Debug.Log("Material: " + materialList[c].name + " Shader: " + materialList[c].shader.name);
                }
            }
        }

        Debug.Log("Materials with keyword: " + keywordToFind + " : Found " + count + " materials");

    }

    readonly public static string keywordToFind = "NOISE_TEXTURE";

    /// <summary>
    /// Resets all shader keywords stored in materials or material selection
    /// </summary>
    [MenuItem("Hungry Dragon/Tools/Texture mipmap reset")]
    public static void TextureMipmapReset()
    {
        Debug.Log("Obtaining texture list");

        //        EditorUtility.("Material keyword reset", "Obtaining Material list ...", "");

        Texture2D[] textureList;
        FindAssetInContent<Texture2D>(Directory.GetCurrentDirectory() + "\\Assets", out textureList);

        float c = 0;

        Debug.Log("Enabled mipmap textures :");
        foreach (Texture2D texture in textureList)
        {
            string path = AssetDatabase.GetAssetPath(texture);
            TextureImporter textureImporter = AssetImporter.GetAtPath(path) as TextureImporter;
                       
            if (EditorUtility.DisplayCancelableProgressBar( "Reimporting texture", path, c / (float)textureList.Length))
            {
                EditorUtility.ClearProgressBar();
                break;
            }
            if (textureImporter != null && textureImporter.mipmapEnabled)
            {
                textureImporter.mipmapEnabled = false;
                AssetDatabase.ImportAsset(path);
                Debug.Log(">>> " + path);
                c++;                   

            }
        }

        EditorUtility.ClearProgressBar();
        Debug.Log("list length: " + textureList.Length + " Mipmap textures:" + c);

    }

    /// <summary>
    /// Unchecks all import materials option in models
    /// </summary>
    [MenuItem("Hungry Dragon/Tools/Uncheck import materials")]
    public static void uncheckImportMaterials()
    {
        Debug.Log("Obtaining fbx list");

        string[] allAssetPaths = AssetDatabase.GetAllAssetPaths();
        List<string> allFBXPaths = new List<string>();

        foreach (string assetPath in allAssetPaths)
        {
            if (assetPath.ToLower().Contains(".fbx"))
            {
                allFBXPaths.Add(assetPath);

            }
        }


        using (StreamWriter sw = new StreamWriter("fbx_with_import_material_check.txt"))
        {
            int imc = 0;
            foreach (string fbxPath in allFBXPaths)
            {
                ModelImporter model = AssetImporter.GetAtPath(fbxPath) as ModelImporter;

                if (model != null && model.importMaterials)
                {
//                    Debug.Log("Model: " + fbxPath);
                    sw.WriteLine("Model: " + fbxPath);
                    model.importMaterials = false;
                    AssetDatabase.ImportAsset(fbxPath);
                    imc++;
                }
            }

//            Debug.Log("FBX counted: " + allFBXPaths.Count + " whose import materials option is checked: " + imc);
            sw.WriteLine("FBX counted: " + allFBXPaths.Count + " whose import materials option is checked: " + imc);
        }

        /*

                Texture2D[] textureList;
                FindAssetInContent<Texture2D>(Directory.GetCurrentDirectory() + "\\Assets", out textureList);

                float c = 0;

                Debug.Log("Enabled mipmap textures :");
                foreach (Texture2D texture in textureList)
                {
                    string path = AssetDatabase.GetAssetPath(texture);
                    TextureImporter textureImporter = AssetImporter.GetAtPath(path) as TextureImporter;

                    if (EditorUtility.DisplayCancelableProgressBar("Reimporting texture", path, c / (float)textureList.Length))
                    {
                        EditorUtility.ClearProgressBar();
                        break;
                    }
                    if (textureImporter != null && textureImporter.mipmapEnabled)
                    {
                        textureImporter.mipmapEnabled = false;
                        AssetDatabase.ImportAsset(path);
                        Debug.Log(">>> " + path);
                        c++;

                    }
                }

                EditorUtility.ClearProgressBar();
                Debug.Log("list length: " + textureList.Length + " Mipmap textures:" + c);
        */
    }



    /// <summary>
    /// Resets all shader keywords stored in materials or material selection
    /// </summary>
    [MenuItem("Hungry Dragon/Tools/Seek for directional lights")]
    public static void seekForLights()
    {

        Light[] lightList;
        FindAssetInScene<Light>(out lightList);

        for (int c = 0; c < lightList.Length; c++)
        {
            if (lightList[c].type == LightType.Directional)
            {
                Debug.Log("Directional Light: " + lightList[c].gameObject.name);
            }
        }

        Debug.Log("list length: " + lightList.Length);

    }



    /// <summary>
    /// Resets all shader keywords stored in materials or material selection
    /// </summary>
    /// 
    public static int checkRepeatedName(ref Spawner[] spawnerList, string name)
    {
        int count = 0;
        foreach (Spawner obj in spawnerList)
        {
            if (obj.gameObject.name == name)
            {
                count++;
            }
        }

        return count;
    }

    public static int checkTriggerArray(Spawner.SpawnCondition[] triggerArray)
    {
        if (triggerArray.Length > 0)
        {
            for (int c = 0; c < triggerArray.Length; c++)
            {
                if (triggerArray[c].type == Spawner.SpawnCondition.Type.XP)
                {
                    return c;
                }
            }
        }
        return -1;
    }


	public static int checkTriggerArrayTime(Spawner.SpawnCondition[] triggerArray)
	{
		if (triggerArray.Length > 0)
		{
			for (int c = 0; c < triggerArray.Length; c++)
			{
				if (triggerArray[c].type == Spawner.SpawnCondition.Type.TIME)
				{
					return c;
				}
			}
		}
		return -1;
	}

	public static int checkTriggerArrayKill(Spawner.SkuKillCondition[] triggerArray)
	{
		if (triggerArray.Length > 0)
		{
			for (int c = 0; c < triggerArray.Length; c++) 
			{
				if (triggerArray [c].sku.Length > 0)
					return c;
			}
		}
		return -1;
	}


    //[MenuItem("Hungry Dragon/Balancing/Spawners Rename Part 1")]
    [MenuItem("Hungry Dragon/Balancing/Spawners Rename")]
    public static void SceneSpawnersRenamePart1()
    {
        Spawner[] spawnerList;
        FindAssetInScene<Spawner>(out spawnerList,true);
        Undo.RecordObjects(spawnerList, "Disable static batching");
        foreach (Spawner obj in spawnerList)
        {
            int activationCheck = checkTriggerArray(obj.activationTriggers);
            int deactivationCheck = checkTriggerArray(obj.deactivationTriggers);
			int activationCheckTime = checkTriggerArrayTime(obj.activationTriggers);
			int deactivationCheckTime = checkTriggerArrayTime(obj.deactivationTriggers);
			int activationCheckKill = checkTriggerArrayKill(obj.activationKillTriggers);
			int deactivationCheckKill = checkTriggerArrayKill(obj.deactivationKillTriggers);

            Spawner.SpawnCondition activation = (activationCheck >= 0) ? obj.activationTriggers[activationCheck] : null;
            Spawner.SpawnCondition deactivation = (deactivationCheck >= 0) ? obj.deactivationTriggers[deactivationCheck] : null;
			Spawner.SpawnCondition activationTime = (activationCheckTime >= 0) ? obj.activationTriggers[activationCheckTime] : null;
			Spawner.SpawnCondition deactivationTime = (deactivationCheckTime >= 0) ? obj.deactivationTriggers[deactivationCheckTime] : null;
			Spawner.SkuKillCondition activationKill = (activationCheckKill >= 0) ? obj.activationKillTriggers[activationCheckKill] : null;
			Spawner.SkuKillCondition deactivationKill = (deactivationCheckKill >= 0) ? obj.deactivationKillTriggers[deactivationCheckKill] : null;

            Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
            if (prefab != null)
            {
                string prefabName = prefab.name;
                if (activation != null || deactivation != null)
                {
                    prefabName = prefabName + "_XP_" + ((activation != null) ? activation.value.ToString() : "0") + "_" + ((deactivation != null) ? deactivation.value.ToString() : "0");
                }
				else if (activationTime != null || deactivationTime != null)
				{
					prefabName = prefabName + "_TIME_" + ((activationTime != null) ? activationTime.value.ToString() : "0") + "_" + ((deactivationTime != null) ? deactivationTime.value.ToString() : "0");
				}
				else if (activationKill != null || deactivationKill != null) 
				{
					prefabName = prefabName + "_KILL_" + ((activationKill != null) ? activationKill.sku.ToString() : "None") + "-" + ((activationKill != null) ? activationKill.value.ToString() : "0") + "_" + ((deactivationKill != null) ? deactivationKill.sku.ToString() : "None") + "-" + ((deactivationKill != null) ? deactivationKill.value.ToString() : "0") ;
				}
				obj.gameObject.name = prefabName + "@";
				// Inactive spawners ends with "-IN"
				if (!obj.gameObject.activeInHierarchy)
					obj.gameObject.name = prefabName + "-IN"; 
            }
        }
		SpawnerStar[] spawnerStarList;
		FindAssetInScene<SpawnerStar>(out spawnerStarList,true);
		Undo.RecordObjects(spawnerStarList, "Disable static batching");
		foreach (SpawnerStar obj in spawnerStarList) 
		{
			Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
			if (prefab != null) 
			{
				string prefabName = prefab.name;
				obj.gameObject.name = prefabName + "@";
				// Inactive spawners ends with "-IN"
				if (!obj.gameObject.activeInHierarchy)
					obj.gameObject.name = prefabName + "-IN"; 
			}
		}
        SceneSpawnersRenamePart2();
    }

	//[MenuItem("Hungry Dragon/Balancing/Spawners Rename Part 2")]
	public static void SceneSpawnersRenamePart2()
	{
		Spawner[] spawnerList;
		FindAssetInScene<Spawner>(out spawnerList,true);
		Undo.RecordObjects(spawnerList, "Disable static batching");
		foreach (Spawner obj in spawnerList)
		{
			int activationCheck = checkTriggerArray(obj.activationTriggers);
			int deactivationCheck = checkTriggerArray(obj.deactivationTriggers);
			int activationCheckTime = checkTriggerArrayTime(obj.activationTriggers);
			int deactivationCheckTime = checkTriggerArrayTime(obj.deactivationTriggers);
			int activationCheckKill = checkTriggerArrayKill(obj.activationKillTriggers);
			int deactivationCheckKill = checkTriggerArrayKill(obj.deactivationKillTriggers);

			Spawner.SpawnCondition activation = (activationCheck >= 0) ? obj.activationTriggers[activationCheck] : null;
			Spawner.SpawnCondition deactivation = (deactivationCheck >= 0) ? obj.deactivationTriggers[deactivationCheck] : null;
			Spawner.SpawnCondition activationTime = (activationCheckTime >= 0) ? obj.activationTriggers[activationCheckTime] : null;
			Spawner.SpawnCondition deactivationTime = (deactivationCheckTime >= 0) ? obj.deactivationTriggers[deactivationCheckTime] : null;
			Spawner.SkuKillCondition activationKill = (activationCheckKill >= 0) ? obj.activationKillTriggers[activationCheckKill] : null;
			Spawner.SkuKillCondition deactivationKill = (deactivationCheckKill >= 0) ? obj.deactivationKillTriggers[deactivationCheckKill] : null;

			Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
			if (prefab != null)
			{
				string prefabName = prefab.name;
				if (activation != null || deactivation != null)
				{
					prefabName = prefabName + "_XP_" + ((activation != null) ? activation.value.ToString() : "0") + "_" + ((deactivation != null) ? deactivation.value.ToString() : "0");
				}
				else if (activationTime != null || deactivationTime != null)
				{
					prefabName = prefabName + "_TIME_" + ((activationTime != null) ? activationTime.value.ToString() : "0") + "_" + ((deactivationTime != null) ? deactivationTime.value.ToString() : "0");
				}					
				else if (activationKill != null || deactivationKill != null) 
				{
					prefabName = prefabName + "_KILL_" + ((activationKill != null) ? activationKill.sku.ToString() : "None") + "-" + ((activationKill != null) ? activationKill.value.ToString() : "0") + "_" + ((deactivationKill != null) ? deactivationKill.sku.ToString() : "None") + "-" + ((deactivationKill != null) ? deactivationKill.value.ToString() : "0") ;
				}
				obj.gameObject.name = prefabName.Replace("@","");
				// Inactive spawners ends with "-IN"
				if (!obj.gameObject.activeInHierarchy)
					obj.gameObject.name = prefabName + "-IN";
			}
		}
		SpawnerStar[] spawnerStarList;
		FindAssetInScene<SpawnerStar>(out spawnerStarList,true);
		Undo.RecordObjects(spawnerStarList, "Disable static batching");
		foreach (SpawnerStar obj in spawnerStarList) 
		{
			Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
			if (prefab != null) 
			{
				string prefabName = prefab.name;
				obj.gameObject.name = prefabName.Replace("@","");
				// Inactive spawners ends with "-IN"
				if (!obj.gameObject.activeInHierarchy)
					obj.gameObject.name = prefabName + "-IN";
			}
		}
	}


    [MenuItem("Hungry Dragon/Balancing/Spawners Rename Add Path")]
    public static void SceneSpawnersRenameAddPath()
    {
        Spawner[] spawnerList;
        FindAssetInScene<Spawner>(out spawnerList, true);
        Undo.RecordObjects(spawnerList, "Disable static batching");
        foreach (Spawner obj in spawnerList)
        {
            int activationCheck = checkTriggerArray(obj.activationTriggers);
            int deactivationCheck = checkTriggerArray(obj.deactivationTriggers);
            int activationCheckTime = checkTriggerArrayTime(obj.activationTriggers);
            int deactivationCheckTime = checkTriggerArrayTime(obj.deactivationTriggers);
            int activationCheckKill = checkTriggerArrayKill(obj.activationKillTriggers);
            int deactivationCheckKill = checkTriggerArrayKill(obj.deactivationKillTriggers);

            Spawner.SpawnCondition activation = (activationCheck >= 0) ? obj.activationTriggers[activationCheck] : null;
            Spawner.SpawnCondition deactivation = (deactivationCheck >= 0) ? obj.deactivationTriggers[deactivationCheck] : null;
            Spawner.SpawnCondition activationTime = (activationCheckTime >= 0) ? obj.activationTriggers[activationCheckTime] : null;
            Spawner.SpawnCondition deactivationTime = (deactivationCheckTime >= 0) ? obj.deactivationTriggers[deactivationCheckTime] : null;
            Spawner.SkuKillCondition activationKill = (activationCheckKill >= 0) ? obj.activationKillTriggers[activationCheckKill] : null;
            Spawner.SkuKillCondition deactivationKill = (deactivationCheckKill >= 0) ? obj.deactivationKillTriggers[deactivationCheckKill] : null;

            Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
            if (prefab != null)
            {
                string prefabName = prefab.name;
                string prefabPath = obj.GetHierarchyPath();
                if (activation != null || deactivation != null)
                {
                    prefabName = prefabName + "_XP_" + ((activation != null) ? activation.value.ToString() : "0") + "_" + ((deactivation != null) ? deactivation.value.ToString() : "0");
                }
                else if (activationTime != null || deactivationTime != null)
                {
                    prefabName = prefabName + "_TIME_" + ((activationTime != null) ? activationTime.value.ToString() : "0") + "_" + ((deactivationTime != null) ? deactivationTime.value.ToString() : "0");
                }
                else if (activationKill != null || deactivationKill != null)
                {
                    prefabName = prefabName + "_KILL_" + ((activationKill != null) ? activationKill.sku.ToString() : "None") + "-" + ((activationKill != null) ? activationKill.value.ToString() : "0") + "_" + ((deactivationKill != null) ? deactivationKill.sku.ToString() : "None") + "-" + ((deactivationKill != null) ? deactivationKill.value.ToString() : "0");
                }
                obj.gameObject.name = prefabName + "_PATH_" + prefabPath;
                // Inactive spawners ends with "-IN"
                if (!obj.gameObject.activeInHierarchy)
                    obj.gameObject.name = prefabName + "-IN";
            }
        }
        SpawnerStar[] spawnerStarList;
        FindAssetInScene<SpawnerStar>(out spawnerStarList, true);
        Undo.RecordObjects(spawnerStarList, "Disable static batching");
        foreach (SpawnerStar obj in spawnerStarList)
        {
            Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
            if (prefab != null)
            {
                string prefabName = prefab.name;
                string prefabPath = obj.GetHierarchyPath();
                obj.gameObject.name = prefabName + "_PATH_" + prefabPath;
                // Inactive spawners ends with "-IN"
                if (!obj.gameObject.activeInHierarchy)
                    obj.gameObject.name = prefabName + "-IN";
            }
        }
    }

    [MenuItem("Hungry Dragon/Balancing/Spawners Rename Remove Path")]
    public static void SceneSpawnersRenameRemovePath()
    {
        Spawner[] spawnerList;
        FindAssetInScene<Spawner>(out spawnerList, true);
        Undo.RecordObjects(spawnerList, "Disable static batching");
        foreach (Spawner obj in spawnerList)
        {
            Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
            if (prefab != null)
            {
                string prefabName = prefab.name;
                int pathPos = obj.gameObject.name.IndexOf("_PATH_");
                if (pathPos > 0)
                {
                    string prefabName2 = obj.gameObject.name.Remove(pathPos);
                    obj.gameObject.name = prefabName2;
                    // Inactive spawners ends with "-IN"
                    if (!obj.gameObject.activeInHierarchy)
                        obj.gameObject.name = prefabName + "-IN";
                }
            }
        }
        SpawnerStar[] spawnerStarList;
        FindAssetInScene<SpawnerStar>(out spawnerStarList, true);
        Undo.RecordObjects(spawnerStarList, "Disable static batching");
        foreach (SpawnerStar obj in spawnerStarList)
        {
            Object prefab = PrefabUtility.GetPrefabParent(obj.gameObject);
            if (prefab != null)
            {
                string prefabName = prefab.name;
                int pathPos = obj.gameObject.name.IndexOf("_PATH_");
                if (pathPos > 0)
                {
                    string prefabName2 = obj.gameObject.name.Remove(pathPos);
                    obj.gameObject.name = prefabName2;
                    // Inactive spawners ends with "-IN"
                    if (!obj.gameObject.activeInHierarchy)
                        obj.gameObject.name = prefabName + "-IN";
                }
            }
        }
    }

    [MenuItem("Hungry Dragon/Marketing/Remove Texture Size Limit")]
    public static void RemoveTextureSizeLimit()
    {
         Debug.Log("Obtaining texture list");

        Texture2D[] textureList;
        FindAssetInContent<Texture2D>(Directory.GetCurrentDirectory() + "\\Assets", out textureList);

        float c = 0;

        Debug.Log("Remove Texture Size Limit :");
        foreach (Texture2D texture in textureList)
        {
            string path = AssetDatabase.GetAssetPath(texture);
            TextureImporter textureImporter = AssetImporter.GetAtPath(path) as TextureImporter;
                       
            if (EditorUtility.DisplayCancelableProgressBar( "Reimporting texture", path, c / (float)textureList.Length))
            {
                EditorUtility.ClearProgressBar();
                break;
            }
            if (textureImporter != null && textureImporter.mipmapEnabled)
            {
                textureImporter.maxTextureSize = 8192;
                AssetDatabase.ImportAsset(path);
                Debug.Log(">>> " + path);
                c++;                   

            }
        }

        EditorUtility.ClearProgressBar();
        Debug.Log("list length: " + textureList.Length + " textures:" + c);
    }


    [MenuItem("Hungry Dragon/Tmp/Remove Read Write And Change Mesh Compression")]
    public static void RemoveMeshesReadWrite()
    {
        Debug.Log("Obtaining Meshes list");

        Mesh[] meshList;
        FindAssetInContent<Mesh>(Directory.GetCurrentDirectory() + "\\Assets", out meshList);

        float c = 0;

        Debug.Log("Remove Read Write From Mesht :");
        foreach (Mesh mesh in meshList)
        {
            string path = AssetDatabase.GetAssetPath(mesh);
            ModelImporter meshImporter = AssetImporter.GetAtPath(path) as ModelImporter;
                       
            if (EditorUtility.DisplayCancelableProgressBar( "Reimporting mesh", path, c / (float)meshList.Length))
            {
                EditorUtility.ClearProgressBar();
                break;
            }
			if (meshImporter != null && (meshImporter.isReadable || meshImporter.meshCompression != ModelImporterMeshCompression.High) )
            {
                meshImporter.isReadable = false;
                meshImporter.meshCompression = ModelImporterMeshCompression.High;
                AssetDatabase.ImportAsset(path);
                Debug.Log(">>> " + path);
                c++;                   
            }
        }

        EditorUtility.ClearProgressBar();
        Debug.Log("list length: " + meshList.Length + " meshes:" + c);
    }


    /// <summary>
    /// Remove unused options in prefab renderers
    /// </summary>
    [MenuItem("Hungry Dragon/Tools/Remove unused options in prefab renderers")]
    public static void cleanRenderers()
    {
        Debug.Log("Obtaining prefab list");

        //        EditorUtility.("Material keyword reset", "Obtaining Material list ...", "");

        GameObject[] prefabList;
        FindAssetInContent<GameObject>(Directory.GetCurrentDirectory() + "\\Assets", out prefabList);

        float c = 0;
        int numModified = 0;
        

        Debug.Log("Seek for renderers in prefabs:");
        foreach (GameObject prefab in prefabList)
        {
            MeshRenderer[] renderers = prefab.GetComponentsInChildren<MeshRenderer>();
            bool modified = false;

            foreach(MeshRenderer rend in renderers)
            {
                if (rend.lightProbeUsage != UnityEngine.Rendering.LightProbeUsage.Off)
                {
                    rend.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
                    modified = true;
                }

                if (rend.motionVectorGenerationMode != MotionVectorGenerationMode.ForceNoMotion)
                {
                    rend.motionVectorGenerationMode = MotionVectorGenerationMode.ForceNoMotion;
                    modified = true;
                }

                if (rend.allowOcclusionWhenDynamic)
                {
                    rend.allowOcclusionWhenDynamic = false;
                    modified = true;
                }

                if (rend.reflectionProbeUsage != UnityEngine.Rendering.ReflectionProbeUsage.Off)
                {
                    rend.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;
                    modified = true;
                }

                if (rend.shadowCastingMode != UnityEngine.Rendering.ShadowCastingMode.Off)
                {
                    rend.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
                    modified = true;
                }

                if (rend.receiveShadows)
                {
                    rend.receiveShadows = false;
                    modified = true;
                }
            }

            if (EditorUtility.DisplayCancelableProgressBar("updating prefabs", prefab.name, c / (float)prefabList.Length))
            {
                EditorUtility.ClearProgressBar();
                break;
            }

            if (modified)
            {
                string path = AssetDatabase.GetAssetPath(prefab);
                if (path.Contains(".prefab"))
                {
                    AssetDatabase.ImportAsset(path);
                    Debug.Log(">>> " + path);
                    numModified++;
                }
            }


            c++;
        }

        EditorUtility.ClearProgressBar();
        Debug.Log("prefab list length: " + prefabList.Length + " modified:" + numModified);

    }

    //------------------------------------------------------------------//
    // METHODS															//
    //------------------------------------------------------------------//
    /// <summary>
    /// Opens the window.
    /// </summary>
    public static void OpenWindow() {
		instance.Show();
	}

	/// <summary>
	/// The editor has been enabled - target object selected.
	/// </summary>
	private void OnEnable() {
		
	}

	/// <summary>
	/// The editor has been disabled - target object unselected.
	/// </summary>
	private void OnDisable() {

	}


	/// <summary>
	/// Update the inspector window.
	/// </summary>
	public void OnGUI() {

	}

}