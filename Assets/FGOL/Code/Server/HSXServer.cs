#if UNITY_EDITOR
//#define DEBUG_FORCE_ANONYMOUS_DAILYEVENT_REWARDS_REQUEST
#endif

//[DGR] No support added yet
//using Definitions;
using FGOL.Authentication;
using FGOL.Configuration;
using FGOL.Save;
using FGOL.Server;
using FGOL.ThirdParty.MiniJSON;
using FGOL.Utilities;
using System;
using System.Collections.Generic;
using UnityEngine;

public class HSXServer /*: AutoGeneratedSingleton<HSXServer>*/
{
	private const string GameID = "HSX";

    private const string PingCommand = "Ping";
    private const string GetGameDataCommand = "GetGameData";
    private const string RecordUserScoreCommand = "RecordUserScore";
	private const string GetEventLeaderboardCommand = "GetEventLeaderboard";
	private const string ClaimEventRewardsCommand = "ClaimEventRewards";
    private const string ClaimedRewardReceiptCommand = "ClaimedRewardReceipt";
    private const string GetLeaderboardCommand = "GetLeaderboard";
	private const string SendMessagesCommand = "SendMessagesCommand";
    private const string CheckMessagesCommand = "CheckMessagesCommand";
    private const string ClearMessagesCommand = "ClearMessagesCommand";
    private const string GetPushNotificationsStatusCommand = "GetPushNotificationsStatus";
    private const string SetPushNotificationsStatusCommand = "SetPushNotificationsStatus";
    private const string GetFriendSharksCommand = "GetFriendSharksCommand";

    private const int MaxAuthRetries = 1;

    private Logging m_logger = null;

    private bool m_configured = false;
    private bool m_inited = false;

    public void Configure()
    {
        if (!m_configured)
        {
            m_configured = true;
            Config.Instance.Init();

            //[DGR] No support added yet
            //Request.certStore = SSLCertManager.Instance.certStore;

            Commander.GlobalHeaders.Add("X-FGOL-game", GameID);
            Commander.GlobalHeaders.Add("X-FGOL-authApiVersion", "2");
        }
    }

    public void Init(GeoLocation.Location location)
    {
        if (!m_inited)
        {
            m_inited = true;

            Configure();

            m_logger = new Logging(Config.Instance["logentries.token"] as string);

            SetServerLocation(location);

            List<Command> commands = new List<Command>();

            commands.Add(new Command(PingCommand, "/Ping", GameID, Command.Type.Normal, Request.Method.GET, 5, 5));
            commands.Add(new Command(GetGameDataCommand, "/GetGameData", GameID, Command.Type.Normal, Request.Method.POST));
            commands.Add(new Command(RecordUserScoreCommand, "/RecordUserScore", GameID, Command.Type.Authenticated, Request.Method.POST));
			commands.Add(new Command(ClaimEventRewardsCommand, "/ClaimEventRewards", GameID, Command.Type.Normal, Request.Method.POST));
            commands.Add(new Command(ClaimedRewardReceiptCommand, "/ClaimedRewardReceipt", GameID, Command.Type.Authenticated, Request.Method.POST));
            commands.Add(new Command(GetEventLeaderboardCommand, "/GetEventLeaderboard", GameID, Command.Type.Normal, Request.Method.POST));
            commands.Add(new Command(GetLeaderboardCommand, "/GetLeaderboard", GameID, Command.Type.Authenticated, Request.Method.POST));
            commands.Add(new Command(CheckMessagesCommand, "/CheckMessages", GameID, Command.Type.Authenticated, Request.Method.POST));
			commands.Add(new Command(ClearMessagesCommand, "/ClearMessages", GameID, Command.Type.Authenticated, Request.Method.POST));
            commands.Add(new Command(SendMessagesCommand, "/SendMessages", GameID, Command.Type.Authenticated, Request.Method.POST));
			commands.Add(new Command(GetPushNotificationsStatusCommand, "/GetPushNotificationsStatus", GameID, Command.Type.Authenticated, Request.Method.POST));
            commands.Add(new Command(SetPushNotificationsStatusCommand, "/SetPushNotificationsStatus", GameID, Command.Type.Authenticated, Request.Method.POST));
            commands.Add(new Command(GetFriendSharksCommand, "/GetFriendSharks", GameID, Command.Type.Authenticated, Request.Method.POST));

            Commander.Instance.Init(
                commands,
                delegate (Command command, Dictionary<string, string> parameters, Commander.BeforeCommandComplete callback)
                {
                    Error error = null;

                    if (Authenticator.Instance.Token != null)
                    {
                        parameters["deviceToken"] = Authenticator.Instance.Token.ToString();
                    }

                    parameters["version"] = Globals.GetApplicationVersion();
                    parameters["platform"] = Globals.GetPlatform().ToString();

                    Action<Error> onAuthed = delegate (Error authError)
                    {
                        if (authError == null)
                        {
                            string sessionToken = Authenticator.Instance.User.sessionToken;

                            if (sessionToken != null)
                            {
                                parameters["fgolID"] = Authenticator.Instance.User.ID;
								parameters["socialID"] = SocialFacade.Instance.GetSocialIDFromHighestPrecedenceNetwork();
                                parameters["sessionToken"] = sessionToken;
                            }
                            else
                            {
                                error = new AuthenticationError("Invalid Session Token");
                            }
                        }

                        callback(error);
                    };

                    //ClaimedRewardReceiptCommand is a special command that is a Normal command but needs authentication
                    bool checkAuth = command.Name == ClaimedRewardReceiptCommand && Authenticator.Instance.User != null && !string.IsNullOrEmpty(Authenticator.Instance.User.ID);

                    if (command.CommandType == Command.Type.Authenticated || checkAuth)
                    {
                        if (AuthManager.Instance.IsAuthenticated(User.LoginType.Default))
                        {
                            onAuthed(null);
                        }
                        else
                        {
                            Debug.LogWarning("HSXServer (BeforeCommand) :: No authed trying to reauthenticated before command");

                            //Try and silently authenticate and continue with request
                            AuthManager.Instance.Authenticate(new PermissionType[] { PermissionType.Basic }, delegate (Error authError, PermissionType[] grantedPermissions, bool cloudSaveAvailable)
                            {
                                onAuthed(authError);
                            }, true);
                        }
                    }
                    else
                    {
                        callback(null);
                    }
                },
                delegate (Command command, Dictionary<string, string> parameters, Error error, Dictionary<string, object> result, Action<Error, Dictionary<string, object>> callback, int retries)
                {
                    // [DGR] Not supported yet
                    //Try and recover from an auth error
                    /*
                    if (error != null && error.GetType() == typeof(AuthenticationError) && retries < MaxAuthRetries && !Authenticator.Instance.CheckIfAuthCommand(command))
                    {
                        //Invalidate the session in an attempt to force re-auth
                        if (Authenticator.Instance.User != null)
                        {
                            Debug.Log("HSXServer (AfterCommand) :: Invalidating session");
                            Authenticator.Instance.User.InvalidateSession();
                        }

                        Debug.Log(string.Format("HSXServer (AfterCommand) :: Auth Error Retrying ({0})", retries));
                        Commander.Instance.RunCommand(command, parameters, callback, ++retries);
                    }
                    else
                    {
                        Debug.Log("Commander Callback :: " + command.Name);

                        callback(error, result);
                    }
                    */
                },
                "*.fgol.mobi"
            );

            SaveGameManager.Instance.Init();
        }
    }

    public void SetServerLocation(GeoLocation.Location location)
    {
        GeoLocation.UpdateLocation(location);

        string configEnvironment = Config.Instance["server.environment"] as string;
        string environment = configEnvironment != null ? configEnvironment : Globals.GetEnvironment().ToString();
        
        // [DGR] Not supported yet
        //string configAuthUrl = Config.Instance["server.authurl"] as string;        
        // string authUrl = configAuthUrl != null ? configAuthUrl : ServerDNS.dnsRecords["Auth"][environment][location];

        string configHSXUrl = Config.Instance["server.hsxurl"] as string;
        string hsxUrl = configHSXUrl != null ? configHSXUrl : ServerDNS.dnsRecords[GameID][environment][location];

        // [DGR] Not supported yet
        //Authenticator.Instance.SetBaseUrl(authUrl);
        Command.BaseUrls[GameID] = hsxUrl;
    }

    public void SendLog(string message, string stackTrace, LogType logType)
    {
        m_logger.SendLog(message, stackTrace, logType);
    }

	public void CheckConnection(Action<Error> callback)
	{
        if(Application.internetReachability != NetworkReachability.NotReachable)
        {
            if(callback != null)
			{
				callback(null);
			}
        }
        else
        {
            Debug.Log("HSXServer (CheckConnection) :: InternetReachability NotReachable");
            callback(new ClientConnectionError("InternetReachability NotReachable", ErrorCodes.ClientConnectionError));
        }
	}

	public void GetGameData(int gameDataID, Action<Dictionary<string, object>> callback)
	{
		Dictionary<string, string> commandParams = new Dictionary<string, string>();
		commandParams["gameDataID"] = gameDataID.ToString();

		Commander.Instance.RunCommand(GetGameDataCommand, commandParams, delegate(Error error, Dictionary<string, object> result)
		                              {
			if(error == null)
			{
				callback(result);
			}
			else
			{
				Debug.LogError("HSXServer :: (GetGameDataUrl) Failed getting game data url! Error: " + error);
			}
		});
	}

	public void RecordUserScore(string level, int userScore, int playTime, Dictionary<string, object> sharkInfo, Dictionary<string, int> eventInfo, string name, Action<bool> onRecorded)
    {
        try
        {
			User.LoginType[] loginTypes = AuthManager.Instance.GetAuthenticatedNetworks();
			string LoginTypeStr = loginTypes[0].ToString();
            Dictionary<string, object> userScoreInfo = new Dictionary<string, object>
            {
                { "level", level },
                { "score", userScore },
                { "playTime", playTime },
                { "shark", Json.Serialize(sharkInfo) }
            };

            Dictionary<string, string> parameters = new Dictionary<string, string>
            {
                { "userScoreData", Json.Serialize(userScoreInfo) },
				{ "eventScoreData", Json.Serialize(eventInfo) },
				{ "network", LoginTypeStr },
                { "name", name }
            };

            RunStoreInfoRequest(RecordUserScoreCommand, parameters, onRecorded);
        }
        catch (Exception e)
        {
			onRecorded(false);
            Debug.LogError("HSXServer (RecordUserScore) :: Failed Populating parameters: " + e.Message);
        }
    }

	public void RecordUserEventScore(Dictionary<string, int> eventInfo, string name, Action<bool> onRecorded)
	{
		try
		{
			User.LoginType[] loginTypes = AuthManager.Instance.GetAuthenticatedNetworks();
			string LoginTypeStr = loginTypes[0].ToString();
			Dictionary<string, string> parameters = new Dictionary<string, string>
			{
				{ "eventScoreData", Json.Serialize(eventInfo) },
				{ "network", LoginTypeStr },
				{ "name", name }
			};
			RunStoreInfoRequest(RecordUserScoreCommand, parameters, onRecorded);
		}
		catch(Exception e)
		{
			onRecorded(false);
			Debug.LogError("HSXServer (RecordUserEventScore) :: Failed Populating parameters: " + e.Message);
		}
	}

    //[DGR] No support added yet
    /*public void ClaimEventRewards(Dictionary<string, int> eventScores, Action<bool, Dictionary<string, DailyEventRewardResult>> onClaimed)
	{
		Dictionary<string, string> parameters = new Dictionary<string,string>
		{
			{ "userScoreData", Json.Serialize(eventScores)}
		};

#if !DEBUG_FORCE_ANONYMOUS_DAILYEVENT_REWARDS_REQUEST
		string sessionToken = Authenticator.Instance.User.sessionToken;
		// If user is a hacker/cheater/pirate, don't send his fgolID to server as scores are not submited for those users, as we still want to award them with reward we set their fgolID to local
		// For local users the reward  isbased on score compared to total scores and not based on data in Rewards table
		if(sessionToken != null && !SaveFacade.Instance.userSaveSystem.isPirate && !SaveFacade.Instance.userSaveSystem.isHacker && !SaveFacade.Instance.userSaveSystem.isCheater)
		{
			parameters["fgolID"] = Authenticator.Instance.User.ID;
			parameters["socialID"] = SocialFacade.Instance.GetSocialIDFromHighestPrecedenceNetwork();
			parameters["sessionToken"] = sessionToken;
		}
		else
#endif
		{
			parameters["fgolID"] = "local";
		}

		Commander.Instance.RunCommand(ClaimEventRewardsCommand, parameters, delegate (Error error, Dictionary<string, object> result){
            Dictionary<string, DailyEventRewardResult> rewardResults = new Dictionary<string, DailyEventRewardResult>();

            bool success = true;

            if (error == null)
            {
                if (result.ContainsKey("rewardData"))
                {
                    Dictionary<string, object> rewardResultsCollection = result["rewardData"] as Dictionary<string, object>;
                    foreach (KeyValuePair<string, object> item in rewardResultsCollection)
                    {
                        Dictionary<string, object> rewardResult = item.Value as Dictionary<string, object>;
                        DailyEventData eventData = null;
                        DailyEventRewardData rewardData = null;
                        int score = 0;
                        int position = -1;
                        int participants = 0;
                        bool claimed = false;
                        if (rewardResult.ContainsKey("DailyEventData"))
                        {
                            eventData = new DailyEventData();
                            GameData.ApplyData(eventData, (Dictionary<string, object>)rewardResult["DailyEventData"], "", "");
                        }
                        if (rewardResult.ContainsKey("DailyEventRewardData"))
                        {
                            rewardData = new DailyEventRewardData();
                            GameData.ApplyData(rewardData, (Dictionary<string, object>)rewardResult["DailyEventRewardData"], "", "");
                        }
						try
						{
							if(rewardResult.ContainsKey("score"))
							{
								score = Convert.ToInt32(rewardResult["score"]);
							}
							if(rewardResult.ContainsKey("position"))
							{
								position = Convert.ToInt32(rewardResult["position"]);
							}
							if(rewardResult.ContainsKey("totalEntries"))
							{
								participants = Convert.ToInt32(rewardResult["totalEntries"]);
							}
							// this will always be here.
							if(rewardResult.ContainsKey("claimed"))
							{
								claimed = Convert.ToBoolean(rewardResult["claimed"]);
							}
							else
							{
								Debug.LogError("HSXServer (ClaimEventRewards) :: Missing value from claimed values !!");
							}
							rewardResults.Add(item.Key, new DailyEventRewardResult(eventData, rewardData, score, position, participants, claimed));
						}
						catch (Exception e)
						{
							Debug.LogError("HSXServer(ClaimEventRewards) :: A cast did fail: please check the exception:\n" + e.StackTrace);
						}
                    }
                }
            }
            else
            {
                if (error.code == ErrorCodes.ValidationError)
                {
                    success = false;
                }

                Debug.LogError("HSXServer (ClaimEventRewards) :: Error claiming rewards!");
            }

            onClaimed(success, rewardResults);
        });
	}
    */

    public void ClaimedRewardReceipt(string[] eventIDs)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "eventIDs", string.Join(",", eventIDs) }
        };

        Commander.Instance.RunCommand(ClaimedRewardReceiptCommand, parameters, delegate(Error error, Dictionary<string, object> result){
            if (error != null)
            {
                Debug.LogWarning("HSXServer (ClaimedRewardReceipt) :: Error sending receipt to server");
            }
        });
    }

    public void GetLeaderboard(string level, string friendIDs, Action<List<object>> onGetLeaderboard)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "level", level },
            { "friendIDs", friendIDs }
        };

        Commander.Instance.RunCommand(GetLeaderboardCommand, parameters, delegate (Error error, Dictionary<string, object> result){
            if (error == null)
            {
                if (result.ContainsKey("leaderboard"))
                {
                    onGetLeaderboard(result["leaderboard"] as List<object>);
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (GetLeaderboard) Malformed response");
                    onGetLeaderboard(null);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (GetLeaderboard) Failed retrieving leaderboard! Error: " + error);
                onGetLeaderboard(null);
            }
        });
    }

	public void GetEventLeaderboard(string eventID, int score, Action<List<object>> onGetEventLeaderboard)
	{
		Dictionary<string, string> parameters = new Dictionary<string, string>
		{
			{ "eventID", eventID },
			{ "score", score.ToString() }
		};

        if (SocialManager.Instance.IsUser(SocialManager.GetSelectedSocialNetwork()) && Authenticator.Instance.User != null)
        {
            parameters["fgolID"] = Authenticator.Instance.User.ID;
        }
        else
        {
            parameters["fgolID"] = "local";
        }

		Commander.Instance.RunCommand(GetEventLeaderboardCommand, parameters, delegate (Error error, Dictionary<string, object> result){
			if (error == null)
			{
				if (result.ContainsKey("leaderboard"))
				{
					onGetEventLeaderboard(result["leaderboard"] as List<object>);
				}
				else
				{
					Debug.LogWarning("HSXServer :: (GetLeaderboard) Malformed response");
					onGetEventLeaderboard(null);
				}
			}
			else
			{
				Debug.LogError("HSXServer :: (GetLeaderboard) Failed retrieving leaderboard! Error: " + error);
				onGetEventLeaderboard(null);
			}
		});
	}

    public void GetFriendSharks(string friendIDs, Action<List<object>> onGetFriendSharks)
    {
		Debug.Log("FriendIDs : " + friendIDs);
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "friendIDs", friendIDs }
        };

        Commander.Instance.RunCommand(GetFriendSharksCommand, parameters, delegate (Error error, Dictionary<string, object> result) {
            if (error == null)
            {
                if (result.ContainsKey("friendSharks"))
                {
                    onGetFriendSharks(result["friendSharks"] as List<object>);
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (GetFriendSharks) Malformed response");
                    onGetFriendSharks(null);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (GetFriendSharks) Failed retrieving friend sharks! Error: " + error);
                onGetFriendSharks(null);
            }
        });
    }

	public void SendMessages(string fromName, string recipientSocialIDs, string messageType, Action<bool> onSendMessage)
	{
		Dictionary<string, string> parameters = new Dictionary<string, string>
		{
			{ "name", fromName },
			{ "messageType", messageType },
			{ "recipientSocialIDs", recipientSocialIDs }
		};

		Commander.Instance.RunCommand(SendMessagesCommand, parameters, delegate (Error error, Dictionary<string, object> result)
		{
			if (error == null)
			{
				onSendMessage(true);
            }
			else
			{
				Debug.LogError("HSXServer :: (SendMessages) Failed sending " + messageType + " gift! Error: " + error);
				onSendMessage(false);
			}
		});
	}

	public void CheckMessages(string name, string friendIDs, Action<Dictionary<string, object>> onCheckMessages)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "name", name }
        };

        if (!string.IsNullOrEmpty(friendIDs))
        {
            parameters.Add("friendIDs", friendIDs);
        }

        Commander.Instance.RunCommand(CheckMessagesCommand, parameters, delegate (Error error, Dictionary<string, object> result){
            if (error == null)
            {
                if (result != null && result.ContainsKey("messages"))
                {
                    onCheckMessages(result["messages"] as Dictionary<string, object>);
                }
                else
                {
                    onCheckMessages(null);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (CheckMessages) Failed retrieving messages! Error: " + error);
                onCheckMessages(null);
            }
        });
    }

    public void ClearMessages(string[] messagesToClear, Action<bool> onClear)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "messageIDs", string.Join(",", messagesToClear) }
        };

        Commander.Instance.RunCommand(ClearMessagesCommand, parameters, delegate (Error error, Dictionary<string, object> result) {
            if (error == null)
            {
                if (result != null && result.ContainsKey("success"))
                {
                    bool success = false;

                    try
                    {
                        success = Convert.ToBoolean(result["success"]);
                    }
                    catch (Exception) { }

                    onClear(success);
                }
                else
                {
                    onClear(false);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (CheckMessages) Failed retrieving messages! Error: " + error);
                onClear(false);
            }
        });
    }

    public void GetPushNotificationsStatus(Action<Error, bool> onGetStatus)
    {
        Commander.Instance.RunCommand(GetPushNotificationsStatusCommand, new Dictionary<string, string>(), delegate (Error error, Dictionary<string, object> result) {
            if (error == null)
            {
                if (result != null && result.ContainsKey("status"))
                {
                    bool status = true;

                    try
                    {
                        status = Convert.ToBoolean(result["status"]);
                    }
                    catch (Exception) { }

                    onGetStatus(null, status);
                }
                else
                {
                    onGetStatus(new InvalidServerResponseError("No status retrieved"), false);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (GetPushNotificationsStatus) Failed getting status! Error: " + error);
                onGetStatus(error, false);
            }
        });
    }

    public void SetPushNotificationsStatus(bool status, Action<bool> onSetStatus)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "status", status.ToString() }
        };

        Commander.Instance.RunCommand(SetPushNotificationsStatusCommand, parameters, delegate (Error error, Dictionary<string, object> result) {
            if (error == null)
            {
                if (result != null && result.ContainsKey("success"))
                {
                    bool success = false;

                    try
                    {
                        success = Convert.ToBoolean(result["success"]);
                    }
                    catch (Exception) { }

                    onSetStatus(success);
                }
                else
                {
                    onSetStatus(false);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (SetPushNotificationsStatus) Failed setting status! Error: " + error);
                onSetStatus(false);
            }
        });
    }

    /*public void UpdateFriendsList(Dictionary<string, string[]> friends, Action<Dictionary<string, object>> onUpdate)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>();

        foreach(KeyValuePair<string, string[]> pair in friends)
        {
            parameters.Add(pair.Key, string.Join(",", pair.Value));
        }

        Commander.Instance.RunCommand(UpdateFriendsListCommand, parameters, delegate(Error error, Dictionary<string, object> result)
        {
            if(error == null)
            {
                if(result.ContainsKey("friendsList"))
                {
                    onUpdate(result["friendsList"] as Dictionary<string, object>);
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (UpdateFriendsList) Malformed response");
                    onUpdate(null);
                }
            }
            else
            {
                Debug.LogError("HSXServer :: (UpdateFriendsList) Failed storing info! Error: " + error);
                onUpdate(null);
            }
        });
    }

    public void RecordUserActivity(string activityType, Dictionary<string, string> activityParams, Action onRecorded)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "activityType", activityType }
        };

        if(activityParams != null)
        {
            foreach(KeyValuePair<string, string> pair in activityParams)
            {
                parameters.Add(pair.Key, pair.Value);
            }
        }

        RunStoreInfoRequest(RecordUserActivityCommand, parameters, onRecorded);
    }

    public void GetNewsFeed(Action<List<object>> onGetNewsFeed)
    {
        Commander.Instance.RunCommand(GetNewsFeedCommand, null, delegate(Error error, Dictionary<string, object> result)
        {
            List<object> newsFeed = null;

            if(error == null)
            {
                if(result.ContainsKey("newsFeed"))
                {
                    newsFeed = result["newsFeed"] as List<object>;
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (GetNewsFeed) Malformed response");
                }

            }
            else
            {
                Debug.LogWarning("HSXServer :: (GetNewsFeed) Error retrieving newsfeed - " + error);
            }

            onGetNewsFeed(newsFeed);
        });
    }

    public void StoreSharkInfo(string sharkInfo, Action onSharkInfoStored)
    {
        Dictionary<string, string> parameters = new Dictionary<string,string>
        {
            { "sharkInfo", sharkInfo }
        };

        RunStoreInfoRequest(StoreSharkInfoCommand, parameters, onSharkInfoStored);
    }

    public void GetFriendsSharkInfo(Action<Dictionary<string, object>[]> onGetFriendsSharkInfo)
    {
        Commander.Instance.RunCommand(GetFriendsSharkInfoCommand, null, delegate(Error error, Dictionary<string, object> result)
        {
            List<Dictionary<string, object>> friendsSharkInfo = new List<Dictionary<string,object>>();

            if(error == null)
            {
                if(result.ContainsKey("friendsSharkInfo"))
                {
                    List<object> array = result["friendsSharkInfo"] as List<object>;

                    foreach(object sharkInfoObj in array)
                    {
                        Dictionary<string, object> sharkInfo = sharkInfoObj as Dictionary<string, object>;

                        if(sharkInfo != null)
                        {
                            friendsSharkInfo.Add(sharkInfo);
                        }
                    }
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (GetFriendsSharkInfo) Malformed response retrieving friends shark info");
                }
            }
            else
            {
                Debug.LogWarning("HSXServer :: (GetFriendsSharkInfo) Error retrieving friends shark info - " + error);
            }

            onGetFriendsSharkInfo(friendsSharkInfo.ToArray());
        });
    }

    public void RecordInvites(SocialFacade.Network network, string[] friendIds, Action<Error, Dictionary<string, object>> onRecordInvites)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "network", network.ToString() },
            { "friendIds", string.Join(",", friendIds) }
        };

        Commander.Instance.RunCommand(RecordInvitesCommand, parameters, delegate(Error error, Dictionary<string, object> result)
        {
            if(error == null)
            {
                if(result.ContainsKey("inviteInfo"))
                {
                    Dictionary<string, object> inviteInfo = result["inviteInfo"] as Dictionary<string, object>;
                    onRecordInvites(null, inviteInfo);
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (RecordInvites) Malformed response retrieving invite info");
                    onRecordInvites(new InvalidServerResponseError("Response not as expected"), null);
                }
            }
            else
            {
                Debug.LogWarning("HSXServer :: (RecordInvites) Error from server: " + error);
                onRecordInvites(error, null);
            }
        });
    }

    public void GetMessages(Action<List<object>> onGetMessages)
    {
        Commander.Instance.RunCommand(GetMessagesCommand, null, delegate(Error error, Dictionary<string, object> result)
        {
            if(error == null)
            {
                if(result.ContainsKey("messages"))
                {
                    onGetMessages(result["messages"] as List<object>);
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (GetMessages) Malformed response retrieving invite info");
                    onGetMessages(null);
                }
            }
            else
            {
                Debug.LogWarning("HSXServer :: (GetMessages) Error from server: " + error);
                onGetMessages(null);
            }
        });
    }

    public void DeleteMessages(string[] messageIDs, Action<Error> onDeleteMessage)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "messageIDs", string.Join(",", messageIDs) }
        };

        Commander.Instance.RunCommand(DeleteMessagesCommand, parameters, delegate(Error error, Dictionary<string, object> result)
        {
            if(error == null)
            {
                if(result.ContainsKey("success"))
                {
                    onDeleteMessage(null);
                }
                else
                {
                    Debug.LogWarning("HSXServer :: (DeleteMessages) Malformed response deleteing message");
                    onDeleteMessage(error);
                }
            }
            else
            {
                Debug.LogWarning("HSXServer :: (DeleteMessages) Error from server: " + error);
                onDeleteMessage(error);
            }
        });
    }

    public void ShareFinSpinReward(string[] friends)
    {
        Dictionary<string, string> parameters = new Dictionary<string, string>
        {
            { "friends", string.Join(",", friends) }
        };

        Commander.Instance.RunCommand(ShareFinSpinRewardCommand, parameters, delegate(Error error, Dictionary<string, object> result)
        {
            if(error == null)
            {
                if(!result.ContainsKey("success"))
                {
                    Debug.LogWarning("HSXServer :: (ShareFinSpinReward) Malformed response deleteing message");
                }
            }
            else
            {
                Debug.LogWarning("HSXServer :: (ShareFinSpinReward) Error from server: " + error);
            }
        });
    }*/

    private void RunStoreInfoRequest(string command, Dictionary<string, string> parameters, Action<bool> onComplete)
    {
        Commander.Instance.RunCommand(command, parameters, delegate(Error error, Dictionary<string, object> result)
        {
			bool success = true;
            if(error == null)
            {
                if(!result.ContainsKey("success") || !Convert.ToBoolean(result["success"]))
                {
					success = false;
                    Debug.LogError(string.Format("HSXServer :: ({0}) Failed storing info! Invalid Response!", command));
                }
            }
            else
            {
				success = false;
				Debug.LogError(string.Format("HSXServer :: ({0}) Failed storing info! Error: " + error, command));
            }

            onComplete(success);
        });
    }
}