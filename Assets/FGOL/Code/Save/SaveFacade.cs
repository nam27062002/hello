using FGOL.Authentication;
using FGOL.Save;
using FGOL.Save.SaveStates;
using FGOL.Server;
using FGOL.Utilities;
using FGOL;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using FGOL.Events;

using ErrorState = SaveFacadeErrorHandler.ErrorState;
public class SaveFacade : AutoGeneratedSingleton<SaveFacade>
{
    #region Constants
    private const string EnabledPref = "CloudSave.Enabled";
    
    //TODO all these prefs prob need to be stored per user!
    private const string  UploadTimePref = "CloudSave.UploadTime";
    private const string SharkPurchaseEnablePromptPref = "CloudSave.SharkPurchaseEnablePrompt";
    private const string FacebookLoginEnablePromptPref = "CloudSave.FacebookLoginEnablePromptPref";
    private const string SpinnerPath = "GUI/Common/PF_CloudSaveSpinner";
    #endregion

    #region Public Events
    public Action<bool> OnSyncStatusChanged = null;
    public Action InitSaveData = null;
    public Action OnLoadComplete = null;
	public Action OnLoadStarted = null;
    #endregion

    #region Private Members

    private UserSaveSystem m_userSaveSystem = null;
    private SaveFacadeErrorHandler m_errorHandler = null;

    private bool m_cloudSaveEnabled = false;    //Determines if the cloud save system is enabled
    private bool m_cloudSaveDisabled = false;   //Determines if the system was disabled due to an error
    private bool m_cloudSaveAvailable = false;  //Determines if we can use cloud save at all ie do we have internet and valid servers
    private bool m_saveEnabled = true;          //Determines if saving is disabled while in game etc

    private bool m_synced = false;

    private ErrorState m_previousError = ErrorState.None;
    private ErrorCodes m_previousErrorCode = ErrorCodes.Unset;

    private bool m_scheduledSave = false;
    private MonoBehaviour m_scheduler = null;

    // [DGR] UI: No support added yet
    //private GameObject m_spinnerPrefab = null;
    //private GameObject m_spinnerInstance = null;

    private bool m_inited = false;

    // [DGR] STORE: Not supported yet
    //private bool m_goingToAppStore = false;
    
    private bool m_enablingCloudSave = false;

    private bool m_verboseMode = false;
    #endregion

    public SaveFacade()
    {
        m_errorHandler = new SaveFacadeErrorHandler();
        m_errorHandler.onContinue += ContinueLocally;
        m_errorHandler.onGoToAppStore += GoToAppStore;
        m_errorHandler.onRetry += StartAuthLoadFlow;

        GameObject scheduleObject = new GameObject("SaveScheduler");
        m_scheduler = scheduleObject.AddComponent<SaveScheduler>();
        UnityEngine.Object.DontDestroyOnLoad(scheduleObject);

        SaveGameManager.Instance.RegisterSaveComparator(new HSXSaveGameComparator());
        SaveGameManager.Instance.onSyncConflict += ResolveSyncConflict;
        SaveGameManager.Instance.onBeforeUpload += OnBeforeUpload;
        SaveGameManager.Instance.onAfterUpload += OnAfterUpload;        

        RegisterSaveSystem(SocialManager.Instance.GetSocialSaveSysten());
    }

    public void Reset()
    {
        // If has to be unregistered because another user object will be created every time the user is led to the loading scene
        if (m_userSaveSystem != null)
        {
            UnregisterSaveSystem(m_userSaveSystem);
            m_userSaveSystem = null;
        }
    }
    /*protected override void Destroy()
    {
        base.Destroy();
        m_errorHandler = null;
        if (m_scheduler != null)
        {
            UnityEngine.Object.Destroy(m_scheduler.gameObject);
            m_scheduler = null;
        }

        SaveGameManager.DestroyInstance();
        m_userSaveSystem = null;
        m_inited = false;
    }*/

    #region Public Accessors
    public bool cloudSaveEnabled
    {
        get { return m_cloudSaveEnabled; }
        set
        {
            m_cloudSaveEnabled = value;
            PlayerPrefs.SetInt(EnabledPref, (m_cloudSaveEnabled ? 1 : 0));

            PlayerPrefs.Save();
        }
    }

    public bool synced
    {
        get { return m_synced; }
    }

    public int lastUploadTime
    {
        get { return PlayerPrefs.GetInt(UploadTimePref, -1); }
    }

    public int timePlayed
    {
        get { return m_userSaveSystem.timePlayed; }
        set { m_userSaveSystem.timePlayed = value; }
    }

    public bool verboseMode

    {

        get { return m_verboseMode; }

        set { m_verboseMode = value; }

    }

	public UserSaveSystem userSaveSystem { get { return m_userSaveSystem; } }
    #endregion
    
    #region Private Accessors
    private bool cloudSaveAvailable
    {
        get { return m_cloudSaveAvailable; }
        set { m_cloudSaveAvailable = value; }
    }
    
    private bool cloudSaveDisabled
    {
        get { return m_cloudSaveDisabled; }
        set { m_cloudSaveDisabled = value; }
    }
    #endregion

    #region Public Methods

    public void Init()
    {
        if(!m_inited)
        {
            //[DGR] STORE No support added yet
            /*
            App.Instance.RegisterAppStoreClosed(delegate()
            {
                if(m_goingToAppStore)
                {
                    m_goingToAppStore = false;
                    GoToSaveLoaderState();
                }
            });
            */

            m_inited = true;
        }

        m_userSaveSystem = UsersManager.currentUser;
        RegisterSaveSystem(m_userSaveSystem);        
    }

    private void RegisterSaveSystem(SaveSystem saveSystem)
    {
        SaveGameManager.Instance.RegisterSaveSystem(saveSystem);
    }
    
    private void UnregisterSaveSystem(SaveSystem saveSystem)
    {
        SaveGameManager.Instance.UnregisterSaveSystem(saveSystem);
    }

    public void GoToSaveLoaderState(bool startLoadFlow = true, string nextState = null)
    {
        ApplicationManager.instance.NeedsToRestartFlow = true;               
    }

    public void ClearError()
    {
        SetSynced(true);
    }

    public void OnAppResume()
    {                
        if (!LoadingSceneController.InSaveLoaderState)
        {
            GoToSaveLoaderState();
        }        
    }

    public void Load()
    {
        Debug.Log("SaveFacade :: Load");
       
		if(OnLoadStarted != null)
		{
			OnLoadStarted();
		}

        //[DGR] SSL No support added yet
        //SSLCertManager.Instance.Init();
        GameServerManager.SharedInstance.Configure();
        GeoLocation.DetermineGeoLocation(delegate(GeoLocation.Location location){
            GameServerManager.SharedInstance.Init(location);

            //We reset things to allow the system to determine its own state
            cloudSaveAvailable = false;
            cloudSaveDisabled = false;
            cloudSaveEnabled = Convert.ToBoolean(PlayerPrefs.GetInt(EnabledPref));

            SocialFacade.Instance.AppActivation();

            //[DGR] RULES: No support added yet
            /*
            LoadGameDB();                        
            //Download data for next session                        
            GameDataManager.Instance.GetServerGameData();            
            */

            // DGR SSL Not supported yet
            //SSLCertManager.Instance.DownloadCerts();
            
            AuthManager.Instance.LoadUser();

            if (m_previousError != ErrorState.None)
            {
                HandleError();
            }
            else
            {
#if CLOUD_SAVE && (WEIBO || FACEBOOK)
                StartLoadFlow(false);
#else
                ContinueLocally(false);
#endif
            }
        });
    }

    //TODO when social goes back in remove ignoreFirstTimePromptPref
    public void CloudSaveEnableConfirmation(User.LoginType loginType, bool socialPrompt, Action onCloudSaveEnable = null, Action onCloudSaveCancel = null, bool ignoreFirstTimePromptPref = false)
    {
        loginType = loginType == User.LoginType.Default ? SocialManagerUtilities.GetLoginTypeFromSocialNetwork(SocialManager.GetSelectedSocialNetwork()) : loginType;
        string prefKey = socialPrompt ? FacebookLoginEnablePromptPref : SharkPurchaseEnablePromptPref;
        
        int firstTimeEnablePromptShown = PlayerPrefs.GetInt(prefKey, 0);
        
        if (!cloudSaveEnabled && (firstTimeEnablePromptShown == 0 || ignoreFirstTimePromptPref))
        {
            Action onEnable = delegate()
            {
				if(onCloudSaveEnable != null)
					onCloudSaveEnable();

                Enable(loginType, null, onCloudSaveCancel);
            };
            
            Action onCancel = delegate()
            {
                PlayerPrefs.SetInt(prefKey, 1);
                PlayerPrefs.Save();
                
                if (onCloudSaveCancel != null)
                {
                    onCloudSaveCancel();
                }
            };

            Popups_OpenEnableCloud(true, onEnable, onCancel);
        }
        else
        {
            if (onCloudSaveCancel != null)
            {
                onCloudSaveCancel();
            }
        }
    }

    //This is called when enabling cloud save to check if it was previously enabled and if not show popups to enabled it
    public void Enable(User.LoginType loginType, Action onSuccessEnable, Action onFailedEnable)
    {
        loginType = loginType == User.LoginType.Default ? SocialManagerUtilities.GetLoginTypeFromSocialNetwork(SocialManager.GetSelectedSocialNetwork()) : loginType;
        Debug.Log("SaveFacade (Enable) :: Enabling Cloud Save!");

        m_enablingCloudSave = false;

        PersistenceManager.Popups_OpenLoadingPopup();        

        Authenticator.Instance.CheckConnection(delegate(Error connectionError)
        {
            if(connectionError == null)
            {
                User.LoginType authenticatedNetwork = AuthManager.Instance.GetAuthenticatedNetwork(new PermissionType[] { PermissionType.Basic });

                if(authenticatedNetwork != User.LoginType.Default)
                {
                    Debug.Log("SaveFacade (Enable) :: Have an authenticated network - " + authenticatedNetwork);

                    cloudSaveEnabled = true;
                    
                    Action onEnable = delegate()
                    {
                        ClearError();
                        GoToSaveLoaderState();
                        if (onSuccessEnable != null)
                        {
                            onSuccessEnable();
                        }
					};

                    Popups_OpenEnableCloud(false, onEnable, null);                    
                }
                else
                {
                    Debug.Log("SaveFacade (Enable) :: No authenticated network requesting Facebook login");

                    //TODO show popup to allow the user to select a social network here

                    Login(loginType, true, false, onSuccessEnable, delegate()
                    {
                        PersistenceManager.Popups_CloseLoadingPopup();
                        
                        m_enablingCloudSave = false;
                        
                        if (onFailedEnable != null)
                        {
                            onFailedEnable();
                        }
                    });
                }
            }
            else
            {
                PersistenceManager.Popups_OpenCloudEnableHasFailed((int)connectionError.code,
                    delegate ()
                    {
                        PersistenceManager.Popups_CloseLoadingPopup();
                        m_enablingCloudSave = false;

                        if (onFailedEnable != null)
                        {
                            onFailedEnable();
                        }
                    }
                );              
            }
        });
    }

    public void SetSaveEnabled(bool enabled)
    {
        m_saveEnabled = enabled;
    }

    public void Save(string saveSystemName = null, bool upload = false)
    {
        //Test if we have the saves disabled this can't happen in-game state etc
        if(m_saveEnabled)
        {
            SaveGameManager.Instance.SaveSystems(saveSystemName);

            SaveState state = InternalSave(upload);

            //TODO make sure we don't show multiple popups at a time!
            if(state != SaveState.OK && state != SaveState.Disabled)
            {
                SaveGameManager.Instance.saveEnabled = false;

                switch(state)
                {
                    case SaveState.PermissionError:
                        SetSynced(false, ErrorState.PermissionError, ErrorCodes.PermissionError);
                        break;
                    default:
                        SetSynced(false, ErrorState.SaveError, ErrorCodes.SaveError);
                        break;
                }

                PersistenceManager.Popups_OpenLocalSaveGenericError(null);               
            }
        }
    }    

    public void LoadGameDB()
    {
        /*
        //[DGR] No support added yet
        GameDataManager gm = GameDataManager.Instance;

        gm.LoadGameData();

        EventManager.Instance.TriggerEvent(Events.OnGameDBLoaded);
        */
    }

    public void SetCloudSaveDisabled()
    {
        SetSynced(false, ErrorState.Authentication);
    }

    #endregion

    #region popups
    private void Popups_OpenEnableCloud(bool enable, Action onConfirm, Action onCancel)
    {
        if (enable)
        {
            PersistenceManager.Popups_RecommendCloudEnable(onConfirm, onCancel);
        }
        else
        {
            PersistenceManager.Popups_OpenCloudEnable(onConfirm);
        }
    }
    #endregion

    #region Private Methods

    private void CheckDiskSpace(Action onContinue)
    {
        Debug.Log("SaveFacade :: Checking Disk Space");

        SpaceRequirementResult result = SaveGameManager.Instance.CheckDiskRequirements(Authenticator.Instance.User);
        bool error = result != SpaceRequirementResult.OK;        
        if (error)
        {
            SaveGameManager.Instance.saveEnabled = false;
            Action onRetry = delegate ()
            {
                CheckDiskSpace(onContinue);
            };

            switch(result)
            {
                case SpaceRequirementResult.OutOfDiskSpace:
                    PersistenceManager.Popups_OpenSaveDiskOutOfSpaceError(onRetry);
                    break;

                case SpaceRequirementResult.PathUnavailable:
                    PersistenceManager.Popups_OpenSaveDiskNoAccessError(onRetry);
                    break;

            }                           
        }
        else
        {
            //TODO is this the safest place to renable this?
            SaveGameManager.Instance.saveEnabled = true;
            onContinue();
        }
    }

    private bool IsCloudSaveAvailable()
    {
        return m_cloudSaveEnabled;
    }

    private void StartLoadFlow(bool useAuthFlow = false)
    {
        Debug.Log("SaveFacade (StartLoadFlow) :: Starting Flow using authFlow - " + useAuthFlow);

        bool cloudSaveAvailable = IsCloudSaveAvailable();

        SetSynced(false);

        CheckDiskSpace(delegate()
        {
            Authenticator.Instance.CheckConnection(delegate(Error connectionError)
            {
                if(connectionError == null)
                {
                    Debug.Log("SaveFacade (StartLoadFlow) :: Internet connection available!");

                    if(cloudSaveAvailable)
                    {
                        if(useAuthFlow)
                        {
                            AuthFlow();
                        }
                        else
                        {
                            CloudFlow();
                        }
                    }
                    else
                    {
                        ContinueLocally(false);
                    }
                }
                else
                {
                    Debug.Log("SaveFacade (Load) :: No internet connection available");

                    if(cloudSaveAvailable)
                    {
                        SetSynced(false, ErrorState.Connection, connectionError.code);
                    }

                    if (m_verboseMode)
                    {
                        HandleError();
                    }
                    else
                    {
                        ContinueLocally(cloudSaveAvailable);
                    }
                }
            });
        });
    }

    private void StartAuthLoadFlow()
    {
        StartLoadFlow(true);
    }

    private void CloudFlow()
    {
        Debug.Log("SaveFacade :: Cloud Flow");

        cloudSaveAvailable = true;
        
        if(AuthManager.Instance.IsAuthenticated(User.LoginType.Default))
        {
            Debug.Log("SaveFacade (CloudFlow) :: Already authed! Syncing cloud save!");
            //Associate saveID with localID now we are using cloud save with this user
            Authenticator.Instance.User.saveID = Authenticator.Instance.User.ID;
            Authenticator.Instance.User.Save();

            SyncCloudSave();
        }
        else
        {
            Debug.Log("SaveFacade (CloudFlow) :: Not authenticated! Authenticating!");

            //Do a silent auth if possible
            AuthManager.Instance.Authenticate(new PermissionType[] { PermissionType.Basic }, delegate(Error authError, PermissionType[] grantedPermissions, bool saveInCloudAvailable)
            {
                if(authError == null)
                {
                    //Associate saveID with localID now we are using cloud save with this user
                    Authenticator.Instance.User.saveID = Authenticator.Instance.User.ID;
                    Authenticator.Instance.User.Save();

                    Debug.Log("SaveFacade (CloudFlow) :: Auth successful! Syncing cloud save!");
                    SyncCloudSave();
                }
                else
                {
                    Debug.LogWarning("SaveFacade (CloudFlow) :: Unable to authenticate");

                    if (authError.GetType() == typeof(CompatibilityError))
                    {
                        CompatibilityError compatError = authError as CompatibilityError;

                        bool upgradeAvailable = false;

                        if (compatError.serverData != null)
                        {
                            if (compatError.serverData.ContainsKey("upgradeAvailable"))
                            {
                                upgradeAvailable = Convert.ToBoolean(compatError.serverData["upgradeAvailable"]);
                            }
                        }

                        SetSynced(false, upgradeAvailable ? ErrorState.UpgradeNeededAvailable : ErrorState.UpgradeNeeded, authError.code);

                        UpdateNeeded(upgradeAvailable);
                    }
                    else if (authError.GetType() == typeof(UserAuthError))
                    {
                        PersistenceManager.Popups_OpenCloudSwitchWarning(SocialManager.GetSelectedSocialNetwork(),
                            delegate ()
                            {
                                User.Clear();
                                Authenticator.Instance.User = new User();
                                ClearError();
                                CloudFlow();
                            },
                            delegate ()
                            {
                                SetSynced(false, ErrorState.WrongUser, authError.code);

                                PersistenceManager.Popups_OpenNoCloudSaveEnabledAnymore(SocialManager.GetSelectedSocialNetwork(),
                                    delegate ()
                                    {
                                        ContinueLocally();
                                    }
                                );
                            }
                        );                                           
                    }
                    else
                    {
                        if(authError.GetType() == typeof(ClientConnectionError) || authError.GetType() == typeof(ServerConnectionError))
                        {
                            SetSynced(false, ErrorState.Connection, authError.code);
                        }
                        else
                        {
                            SetSynced(false, ErrorState.Authentication, authError.code);
                        }

                        ContinueLocally();
                    }
                }
            }, true);
        }
    }

    private void AuthFlow()
    {
        Debug.Log("SaveFacade :: Auth Flow");

        User.LoginType authenticatedNetwork = AuthManager.Instance.GetAuthenticatedNetwork(new PermissionType[] { PermissionType.Basic });

        if(authenticatedNetwork == User.LoginType.Default)
        {
            //TODO in future if we have multiple logins we need a login provider select
            //TODO Check if any confirm popup is needed
            Login(User.LoginType.Default, false);
        }
        else
        {
            Login(authenticatedNetwork, false);
        }
    }
    
    private void ContinueLocally(bool cloudSaveAvailable)
    {
        Debug.Log("SaveFacade (ContinueLocally) :: Continuing locally with cloudSaveAvailable: " + cloudSaveAvailable);

        //cloudSaveAvailable is used to determine the right error message to show!
        //If we don't explicitly know then it defaults to true

        LoadState result = SaveGameManager.Instance.Load(Authenticator.Instance.User);        
        switch (result)
        {
            case LoadState.OK:
                OnSaveLoaded();
                break;
            case LoadState.PermissionError:
                PersistenceManager.Popups_OpenLocalSavePermissionErrorWhenStarting(
                    delegate ()
                    {
                        ContinueLocally(cloudSaveAvailable);
                    }
                );               
                Debug.Log("SaveFacade :: Permission Error: TODO: Show Popup");
                break;
            default:               
                //Version mismatch on local save will be related to a corrupt save unless produced in a dev environment changing app versions to older ones
                bool cloudEver = false;
                SaveGameManager.CloudSyncStatus status = SaveGameManager.Instance.GetCloudSyncStatus(Authenticator.Instance.User);

                //TODO deal with knowing about a cloud save and maybe knowing about a cloud save
                if (!string.IsNullOrEmpty(Authenticator.Instance.User.ID) && cloudSaveAvailable && status.cloudSaveAvailable)
                {
                    cloudEver = true;
                    SetSynced(false, ErrorState.Corruption, ErrorCodes.CorruptedFileError);
                }
                
                SaveGameManager.Instance.CreateNewSave(Authenticator.Instance.User);

                PersistenceManager.Popups_OpenLoadSaveCorruptedError(cloudEver,
                    delegate ()
                    {
                        ContinueLocally(cloudSaveAvailable);
                    }
                );                                
                break;
        }
    }

    private void ContinueLocally()
    {
        bool cloudSaveAvailable = IsCloudSaveAvailable();

        ContinueLocally(cloudSaveAvailable);
    }
    private void Login(User.LoginType loginType, bool enableFlow, bool continueLocally = true, Action onSuccess = null, Action onFailed = null)
    {
        loginType = loginType == User.LoginType.Default ? SocialManagerUtilities.GetLoginTypeFromSocialNetwork(SocialManager.GetSelectedSocialNetwork()) : loginType;
        if (onFailed == null)
        {
            onFailed = delegate()
            {
                if (continueLocally)
                {
                    ContinueLocally(false);
                }
            };
        }
        
        AuthManager.Instance.Login(loginType, new PermissionType[] { PermissionType.Basic }, delegate(Error error, PermissionType[] grantedPermissions, bool cloudSaveAvailable)
        {
            if(error == null)
            {
                cloudSaveEnabled = true;

                if(LoadingSceneController.InSaveLoaderState)
                {
                    //Associate saveID with localID now we are using cloud save with this user
                    Authenticator.Instance.User.saveID = Authenticator.Instance.User.ID;
                    Authenticator.Instance.User.cloudSaveAvailable = true;
                    Authenticator.Instance.User.Save();

                    SyncCloudSave();
                }
                else
                {
                    if (enableFlow)
                    {
                        Action onEnable = delegate ()
                        {
                            GoToSaveLoaderState();
                        };

                        Popups_OpenEnableCloud(false, onEnable, null);
                    }
                    else
                    {
                        GoToSaveLoaderState();
                    }
                }

                if (onSuccess != null)
                {
                    onSuccess();
                }
            }
            else
            {
                if(error.GetType() == typeof(CompatibilityError))
                {
                    CompatibilityError compatError = error as CompatibilityError;

                    bool upgradeAvailable = false;

                    if(compatError.serverData != null)
                    {
                        if(compatError.serverData.ContainsKey("upgradeAvailable"))
                        {
                            upgradeAvailable = Convert.ToBoolean(compatError.serverData["upgradeAvailable"]);
                        }
                    }

                    SetSynced(false, upgradeAvailable ? ErrorState.UpgradeNeededAvailable : ErrorState.UpgradeNeeded, compatError.code);

                    if (LoadingSceneController.InSaveLoaderState)
                    {
                        UpdateNeeded(upgradeAvailable, false, onFailed);
                    }
                    else
                    {
                        //TODO may need to mark that we are dealing with an error! So we don't go through the handle error flow and instead go straight to required function
                        GoToSaveLoaderState();
                    }
                }
                else if (error.GetType() == typeof(UserAuthError))
                {
                    PersistenceManager.Popups_OpenCloudSwitchWarning(SocialManager.GetSelectedSocialNetwork(),
                        delegate ()
                        {
                            User.Clear();
                            Authenticator.Instance.User = new User();
                            cloudSaveEnabled = true;
                            ClearError();

                            if (LoadingSceneController.InSaveLoaderState)
                            {
                                CloudFlow();
                            }
                            else
                            {
                                GoToSaveLoaderState();
                            }
                        },
                        delegate ()
                        {
                            SetSynced(false, ErrorState.WrongUser, error.code);

                            PersistenceManager.Popups_OpenNoCloudSaveEnabledAnymore(SocialManager.GetSelectedSocialNetwork(),
                                delegate () {
                                    onFailed();
                                }
                            );                           
                        }
                    );                  
                }
                else
                {
                    PersistenceManager.Popups_OpenCloudLoginHasFailed((int)error.code, SocialManager.GetSelectedSocialNetwork(),
                        delegate ()
                        {
                            Login(loginType, enableFlow, continueLocally, onSuccess, onFailed);
                        },
                        delegate ()
                        {
                            SetSynced(false, ErrorState.Authentication, error.code);
                            onFailed();
                        }
                    );                                       
                }
            }
        });
    }

    private void UpdateNeeded(bool upgradeAvailable, bool localCorrupt = false, Action onFailed = null)
    {        
        if (localCorrupt)
        {
            Action onConfirm = null;     
            if(upgradeAvailable)
            {                                             
                onConfirm = delegate()
                {
                    GoToAppStore();
                };                
            }
            else
            {                                             
                onConfirm = delegate()
                {
                    SaveGameManager.Instance.CreateNewSave(Authenticator.Instance.User);
                    
                    if (onFailed != null)
                    {
                        onFailed();
                    }
                    else
                    {
                        ContinueLocally(false);
                    }
                };				
            }

            PersistenceManager.Popups_OpenUpdateToSolveLocalSaveCorrupted(upgradeAvailable, onConfirm);
        }
        else
        {
            Action onConfirm = null;
            Action onCancel = null;  
            if(upgradeAvailable)
            { 
                onConfirm = delegate()
                {
                    GoToAppStore();
                };

                onCancel = delegate()
                {
                    if (onFailed != null)
                    {
                        onFailed();
                    }
                    else
                    {
                        ContinueLocally(false);
                    }
                };                                
            }
            else
            {                
                onConfirm = delegate()
                {
                    if (onFailed != null)
                    {
                        onFailed();
                    }
                    else
                    {
                        ContinueLocally(false);
                    }
                };				
            }

            PersistenceManager.Popups_OpenUpdateToSolveCloudSaveCorrupted(upgradeAvailable, onConfirm, onCancel);
        }        
    }

    private void SyncCloudSave()
    {
        Debug.Log("SaveFacade :: SyncCloudSave");

        Action sync = delegate()
        {
            SaveGameManager.Instance.SyncCloudSave(Authenticator.Instance.User, delegate(Error error, SyncState resultState)
            {
                if(error == null)
                {
                    Debug.Log("SaveFacade (SyncCloudSave) :: Sync complete with result - " + resultState);                                        
					switch(resultState)
                    {
                        case SyncState.Successful:
                            //All good continue
                            cloudSaveAvailable = true;
                            SetSynced(true);
                            OnSaveLoaded();
                            break;

                        case SyncState.UpgradeNeeded:
                            SetSynced(false, ErrorState.UpgradeNeeded, ErrorCodes.CompatibilityError);
                            UpdateNeeded(AuthManager.Instance.upgradeAvailable);
                            break;

                        case SyncState.PermissionError:
                            SetSynced(false, ErrorState.PermissionError, ErrorCodes.CompatibilityError);
                            PersistenceManager.Popups_OpenLocalSavePermissionErrorWhenSyncing(
                                delegate ()
                                {
                                    ContinueLocally();
                                }
                            );                            
                            break;

                        case SyncState.Corrupted:
                            SaveGameManager.Instance.CreateNewSave(Authenticator.Instance.User);
                            PersistenceManager.Popups_OpenLoadSaveBothCorruptedError(
                                delegate ()
                                {
                                    InternalSave(true);

                                    SaveGameManager.Instance.Upload(Authenticator.Instance.User, delegate (Error uploadError)
                                    {
                                        if (error == null)
                                        {
                                            cloudSaveAvailable = true;
                                            SetSynced(true);
                                            ContinueLocally(true);
                                        }
                                        else
                                        {
                                            SetSynced(false, ErrorState.UploadFailed);
                                            ContinueLocally();
                                        }
                                    });
                                }
                            );                                                      
                            break;

                        case SyncState.Inaccessible:
                            PersistenceManager.Popups_OpenLoadSaveInaccessibleError(
                                delegate () 
                                {
                                    SetSynced(false, ErrorState.SyncFailed);
                                    ContinueLocally();
                                },
                                StartAuthLoadFlow,
                                delegate () 
                                {
                                    LoadState result = SaveGameManager.Instance.Load(Authenticator.Instance.User);
                                    if (result == LoadState.OK)
                                    {
                                        SaveGameManager.Instance.Upload(Authenticator.Instance.User, delegate (Error uploadError) {
                                            if (error == null)
                                            {
                                                cloudSaveAvailable = true;
                                                SetSynced(true);
                                                OnSaveLoaded();
                                            }
                                            else
                                            {
                                                SetSynced(false, ErrorState.UploadFailed);
                                                ContinueLocally();
                                            }
                                        });
                                    }
                                    else
                                    {
                                        SetSynced(false, ErrorState.SyncFailed);
                                        ContinueLocally();
                                    }
                                }
                            );                            
                            break;

                        default:
                            //This should never be a reachable case but lets handle it!
                            SetSynced(false, ErrorState.SyncFailed);
                            ContinueLocally();
                            break;
                    }
                }
                else
                {
                    Debug.LogWarning("SaveFacade (SyncCloudSave) :: Sync failed with error: " + error);

                    bool cloudSaveMightBeAvailable = true;

                    if(error is FileNotFoundError)
                    {
                        cloudSaveMightBeAvailable = false;
                        cloudSaveAvailable = true;
                        SetSynced(true);
                    }
                    else
                    {
                        if(error is ClientConnectionError || error is ServerConnectionError)
                        {
                            SetSynced(false, ErrorState.Connection, error.code);
                        }
                        else
                        {
                            GameServerManager.SharedInstance.SendLog("SaveFacade (SyncCloudSave) :: Error - " + error, error.stackTrace, LogType.Error);
                            SetSynced(false, ErrorState.SyncFailed, error.code);
                        }
                    }

                    ContinueLocally(cloudSaveMightBeAvailable);
                }
            });
        };

        if(AuthManager.Instance.upgradeAvailable)
        {
            PersistenceManager.Popup_OpenPromptUpdate(
                delegate ()
                {
                    GoToAppStore();
                },
                delegate ()
                {
                    sync();
                }
            );           
        }
        else
        {
            sync();
        }
    }

    private void ResolveSyncConflict(ConflictState state, object localSave, object cloudSave, Action<ConflictResult> callback)
    {        
        switch(state)
        {
            case ConflictState.LocalCorruptUpgradeNeeded:
                bool upgradeAvailable = AuthManager.Instance.upgradeAvailable;
    
                SetSynced(false, upgradeAvailable ? ErrorState.UpgradeNeededAvailableLocalCorrupt : ErrorState.UpgradeNeededLocalCorrupt);
    
                UpdateNeeded(upgradeAvailable, true);
                break;
            case ConflictState.CloudSaveCorrupt:
                PersistenceManager.Popups_OpenCloudSaveCorruptedError(
                    delegate ()
                    {
                        callback(ConflictResult.Local);
                    }
                );                
                break;
            case ConflictState.LocalSaveCorrupt:
                PersistenceManager.Popups_OpenLocalSaveCorruptedError(
                    delegate ()
                    {
                        SaveGameManager.Instance.CreateNewSave(Authenticator.Instance.User);
                        callback(ConflictResult.Cloud);
                    }
                );               
                break;
            default:
                Action<ConflictResult> onResolve = delegate(ConflictResult result)
                {
                    if (result == ConflictResult.Dismissed)
                    {
                        ContinueLocally(true);
                    }
                    else
                    {
                        callback(result);
                    }
                };
                                
                PersistenceManager.Popups_OpenMerge(state, localSave as ProgressComparatorSystem, cloudSave as ProgressComparatorSystem, m_enablingCloudSave, onResolve);                
                break;
        }
    }

    private void OnSaveLoaded()
    {
        m_enablingCloudSave = false;
        m_verboseMode = false;
        
        Action onContinue = delegate()
        {
            if (InitSaveData != null)
            {
                InitSaveData();
            }

            //Notify any subscribed systems of SaveData being available!
            if(OnLoadComplete != null)
            {
                OnLoadComplete();
            }

            //GameDataID may be generated at this point, so save to disk to preserve it
            //[DGR] RULES: No support added yet
            //m_userSaveSystem.gameDataID = GameDataManager.Instance.gameDataID;
            Save(m_userSaveSystem.name);
        };
        
        if (cloudSaveAvailable && cloudSaveEnabled)
        {
            SocialManager.Instance.IncentiviseLogin(SocialFacade.Network.Default, onContinue);
        }
        else
        {
            onContinue();
        }
    }

    private SaveState InternalSave(bool upload)
    {
        Debug.Log("SaveFacade :: Saving locally");
        SaveState state = SaveGameManager.Instance.SaveToDisk();

        if(state == SaveState.OK)
        {
            Debug.Log("SaveFacade :: Save to disk successful");

            if(upload)
            {
                m_scheduler.StartCoroutine(ScheduleUpload());
            }
        }

        return state;
    }

    private IEnumerator ScheduleUpload()
    {
        if(!m_scheduledSave)
        {
            m_scheduledSave = true;

            Debug.Log("SaveFacade :: Scheduling Upload!");

            yield return new WaitForSeconds(0.5F);

            //Save to cloud if its enabled
            if(m_cloudSaveEnabled && !cloudSaveDisabled && cloudSaveAvailable)
            {
                Debug.Log("SaveFacade :: Scheduled upload proceeding!");

                ShowSpinner();

                int retries = 3;

                Action upload = null;
                upload = delegate()
                {
                    if(retries-- > 0)
                    {
                        Upload(delegate(Error error)
                        {
                            if(error == null)
                            {
                                Debug.Log("SaveFacade (ScheduleUpload) :: Upload successful");

                                // Report cloud save success
                                //[DGR] ANALYTICS No support added yet
                                //HSXAnalyticsManager.Instance.CloudSaveEnabledResult(true, SystemInfo.deviceModel);

								SetSynced(true);
                                PlayerPrefs.SetInt(UploadTimePref, Globals.GetUnixTimestamp());

								m_scheduledSave = false;
                                HideSpinner();
                            }
                            else
                            {
								if(error.GetType() != typeof(UploadDisallowedError))
                                {
                                    if(retries > 0)
                                    {
                                        Debug.LogWarning("SaveFacade (ScheduleUpload) :: Upload Failed Retrying! Error - " + error);

                                        AuthManager.Instance.Authenticate(new PermissionType[] { PermissionType.Basic }, delegate (Error authError, PermissionType[] grantedPermissions, bool saveInCloudAvailable)
                                        {
                                            upload();
                                        });
                                    }
                                    else
                                    {
                                        Debug.LogError("SaveFacade (ScheduleUpload) :: Upload Failed after 3 retries with Error - " + error);

                                        if(error.GetType() == typeof(ClientConnectionError) || error.GetType() == typeof(ServerConnectionError))
                                        {
                                            SetSynced(false, ErrorState.Connection, error.code);
                                        }
                                        else if(error.GetType() == typeof(AuthenticationError))
                                        {
                                            SetSynced(false, ErrorState.Authentication, error.code);
                                        }
                                        else
                                        {
                                            GameServerManager.SharedInstance.SendLog("SaveFacade (ScheduleUpload) :: Error - " + error, error.stackTrace, LogType.Error);
                                            SetSynced(false, ErrorState.UploadFailed, error.code);
                                        }

                                        m_scheduledSave = false;
                                        HideSpinner();

                                        // Report cloud save error
                                        //[DGR] ANALYTICS No support added yet
                                        //HSXAnalyticsManager.Instance.CloudSaveEnabledResult(false, SystemInfo.deviceModel);
                                    }
                                }
                                else
                                {
                                    Debug.Log("SaveFacade (ScheduleUpload) :: Upload not allowed at this time!");
                                    m_scheduledSave = false;
                                    HideSpinner();

                                    // Report cloud save error
                                    //[DGR] ANALYTICS No support added yet
                                    //HSXAnalyticsManager.Instance.CloudSaveEnabledResult(false, SystemInfo.deviceModel);
                                }
                            }
                        });
                    }
                };

                upload();
            }
            else
            {
                Debug.Log("SaveFacade :: Scheduled upload cancelled - cloud save not enabled!");
                m_scheduledSave = false;
            }
        }
        else
        {
            Debug.Log("SaveFacade :: Upload already scheduled! Ignoring!");
            yield break;
        }
    }

    private void OnBeforeUpload(Action<Error, int> onComplete)
    {
        Authenticator.Instance.UpdateSaveVersion(true, onComplete);
    }

    private void OnAfterUpload()
    {
        PlayerPrefs.SetInt(UploadTimePref, Globals.GetUnixTimestamp());

        Authenticator.Instance.UpdateSaveVersion(false, delegate (Error postUpdateError, int unixTimestamp)
        {
            if (postUpdateError != null)
            {
                GameServerManager.SharedInstance.SendLog("SaveFacade (OnAfterUpload) :: Error - " + postUpdateError, postUpdateError.stackTrace, LogType.Error);
            }
        });
    }

    private void Upload(Action<Error> onUploadComplete)
    {
        Action upload = delegate()
        {
            SaveGameManager.Instance.Upload(Authenticator.Instance.User, delegate (Error error)
            {
                onUploadComplete(error);
            });
        };

        if(AuthManager.Instance.IsAuthenticated(User.LoginType.Default))
        {
            upload();
        }
        else
        {
            AuthManager.Instance.Authenticate(new PermissionType[] { PermissionType.Basic }, delegate(Error error, PermissionType[] grantedPermissions, bool saveInCloudAvailable)
            {
                if(error == null)
                {
                    upload();
                }
                else
                {
                    onUploadComplete(error);
                }
            }, true);
        }
    }

    private void SetSynced(bool synced, ErrorState state = ErrorState.None, ErrorCodes errorCode = ErrorCodes.Unset)
    {
        if(!synced && state != ErrorState.None)
        {
            cloudSaveDisabled = true;
        }

        m_synced = synced;
        m_previousError = state;
        m_previousErrorCode = errorCode;

        if(OnSyncStatusChanged != null)
        {
            OnSyncStatusChanged(m_synced);
        }
    }

    private void GoToAppStore()
    {
#if !UNITY_EDITOR
        // [DGR] STORE Not supported yet
        /*
        m_goingToAppStore = true;
		App.Instance.GoToAppStore(App.Instance.GetAppStoreID(App.HungrySharkTitle.World));
            */
#else
        GoToSaveLoaderState();
#endif
    }

    private void ShowSpinner()
    {
        // [DGR] UI: No support added yet
        /*        
        if(m_spinnerPrefab == null)
        {
			m_spinnerPrefab = ResourceLoaderManager.Instance.Load(SpinnerPath) as GameObject;
        }

        UIRoot uiRoot = GameObject.FindObjectOfType<UIRoot>();

        m_spinnerInstance = NGUITools.AddChild(uiRoot.gameObject, m_spinnerPrefab);
        */
    }

    private void HideSpinner()
    {
        // [DGR] UI: No support added yet
        /*if(m_spinnerInstance != null)
        {
            GameObject.Destroy(m_spinnerInstance);
            m_spinnerInstance = null;
        }*/
    }

    private void HandleError()
    {
        m_errorHandler.HandleError(m_previousError, m_previousErrorCode);
    }

    #endregion

    #region Debug Methods
    public static void DeleteLocalSave()
    {
#if !PRODUCTION
        User user = new User();
        user.Load();

        SaveGameManager.Instance.DeleteLocalSave(!string.IsNullOrEmpty(user.saveID) ? user.saveID : SaveGameManager.LocalSaveID);
#endif
    }

    public static void ResetSave()
    {
#if !PRODUCTION
        User user = new User();
        user.Load();

        SaveGameManager.Instance.DeleteLocalSave(!string.IsNullOrEmpty(user.saveID) ? user.saveID : SaveGameManager.LocalSaveID);

        SaveFacade.Instance.GoToSaveLoaderState(true);
#endif
    }
    #endregion
}
