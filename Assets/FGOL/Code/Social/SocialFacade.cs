using FGOL.Utilities;
using FGOL.Authentication;
using System;
using System.Collections.Generic;
using UnityEngine;
using FGOL.Events;

public class SocialFacade : AutoGeneratedSingleton<SocialFacade>
{
    public enum Network
    {
        Facebook,
        Weibo,
        GameCenter,
        Default
    }

	private static string[] localizedNetworkKeys = new string[]
	{
		"TID_SOCIAL_FACEBOOK",
		"TID_SOCIAL_NETWORK_WEIBO_NAME",
		"TID_SOCIAL_NETWORK_GAMECENTER_NAME",
		//"STRING_SOCIAL_NETWORK_GAMECIRCLE",
		"STRING_SOCIAL_NETWORK_DEFAULT"
	};

	public static string GetLocalizedNetworkName(SocialFacade.Network network)
	{        
        return LocalizationManager.SharedInstance.Localize(localizedNetworkKeys [(int)network]);        
	}

    private Dictionary<Network, ISocialInterface> m_includedNetworks = new Dictionary<Network, ISocialInterface>();
	private DictionaryCache<string, Texture2D> m_profilePicturesCache = new DictionaryCache<string, Texture2D>(105); // we need at least 100 (for the live events) + 1 (for the user). 105 to be safe.

	public string GetSocialIDFromHighestPrecedenceNetwork()
	{
		User.LoginType[] authedNetworks = AuthManager.Instance.GetAuthenticatedNetworks();
		if (authedNetworks.Length > 0)
		{
			User.LoginType network = authedNetworks[0];
			return Authenticator.Instance.User.loginCredentials[network].socialID;
		}
		else
		{
			return null;
		}
	}

    public bool IsNetworkAvailable(Network network)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        return m_includedNetworks.ContainsKey(network) && !(m_includedNetworks[network] is NullSocialInterface);
    }

    public void Init()
    {
#if WEIBO
        m_includedNetworks.Add(Network.Weibo, new WeiboSocialInterface());
#else
        m_includedNetworks.Add(Network.Weibo, new EditorDummySocialInterface("Weibo"));
#endif

#if FACEBOOK
        m_includedNetworks.Add(Network.Facebook, new FacebookSocialInterface());
#else
        m_includedNetworks.Add(Network.Facebook, new NullSocialInterface());
#endif

        foreach (KeyValuePair<Network, ISocialInterface> socialInterface in m_includedNetworks)
        {
            socialInterface.Value.Init();
        }

		EventManager.Instance.RegisterEvent(Events.GoInGameButtonPressed, OnGoingInGame);
    }


    public bool IsInited()
    {
        bool returnValue = true;
        foreach (KeyValuePair<Network, ISocialInterface> socialInterface in m_includedNetworks)
        {
            if (!socialInterface.Value.IsInited())
            {
                returnValue = false;
                break;
            }
        }

        return returnValue;
    }

    public void AppActivation()
    {
        foreach (KeyValuePair<Network, ISocialInterface> socialInterface in m_includedNetworks)
        {
            socialInterface.Value.AppActivation();
        }
    }

    public void Login(Network network, PermissionType[] permissions, Action<bool> onLogin)
    {
        Debug.Log("Login " + network);
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).Login(permissions, onLogin);
    }

    public bool IsLoggedIn(Network network)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        return GetNetworkInterface(network).IsLoggedIn();
    }

    public void RefreshAuthentication(Network network, Action<bool> onRefresh)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).RefreshAuthentication(onRefresh);
    }

    public PermissionType[] GetGrantedPermissions(Network network)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        return GetNetworkInterface(network).GetGrantedPermissions();
    }

    public Network[] IsLoggedIn()
    {
        Array networks = Enum.GetValues(typeof(Network));

        List<Network> loggedInNetworks = new List<Network>();

        foreach(Network network in networks)
        {
            if(GetNetworkInterface(network).IsLoggedIn())
            {
                loggedInNetworks.Add(network);
            }
        }

        return loggedInNetworks.ToArray();
    }

    public void Logout(Network network)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).LogOut();
    }

    public void GetProfileInfo(Network network, Action<Dictionary<string, string>> onGetProfileInfo)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).GetProfileInfo(onGetProfileInfo);
    }

    public void InviteFriends(Network network, string title, string message, string appUrl, string imageUrl, Action<string, string[]> onFriendRequest)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).InviteFriends(title, message, appUrl, imageUrl, onFriendRequest);
    }

    public void GetFriends(Network network, Action<Dictionary<string, string>> onGetFriends)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).GetFriends(onGetFriends);
    }

    public void GetProfilePicture(Network network, string socialID, Action<Texture2D> onGetProfilePicture, int width = 256, int height = 256)
    {
		Texture2D picture = m_profilePicturesCache.GetItem(socialID);
		if(picture)
		{
			// if the picture is in the cache: return it.
			onGetProfilePicture(picture);
		}
		else
		{
			// if not, let's the social facade to retrieve it.
			network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
			GetNetworkInterface(network).GetProfilePicture(socialID, onGetProfilePicture, OnProfilePictureReady, width, height);
		}
    }

	private void OnProfilePictureReady(string socialID, Texture2D picture, Action<Texture2D> callback)
	{
		// let's cache the newly retrieved picture.
		Texture2D oldest = null;
		m_profilePicturesCache.CacheItem(socialID, picture, out oldest);
		if(oldest)
		{
			// if the cache has discarded an old texture, let's destroy it.
			GameObject.Destroy(oldest);
		}
		// send back the picture.
		callback(picture);
	}

    public void Share(Network network, string url, string title, string description, string imageUrl, Action<bool> onShare)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).Share(url, title, description, imageUrl, onShare);
    }

    public void SharePicture(Network network, byte[] image, string imageName, string description, Dictionary<string, string> args, Action<bool> onShare)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        GetNetworkInterface(network).SharePicture(image, imageName, description, args, onShare);
    }

    public string GetSocialID(Network network)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        return GetNetworkInterface(network).GetSocialID();
    }

    public string GetAccessToken(Network network)
    {
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;
        return GetNetworkInterface(network).GetAccessToken();
    }

    private ISocialInterface GetNetworkInterface(Network network)
    {
        ISocialInterface socialInterface = null;
        network = network == Network.Default ? SocialManager.GetSelectedSocialNetwork() : network;

        if (m_includedNetworks.ContainsKey(network))
        {
            socialInterface = m_includedNetworks[network];
        }

        return socialInterface;
    }

	private void OnGoingInGame(Enum m_event, object[] args)
	{
		List<Texture2D> pictures = m_profilePicturesCache.Reset();
		Texture2D item = null;
		// destroy all the Texture2D.
		for(int i = 0; i < pictures.Count; i++)
		{
			item = pictures[i];
			pictures.Remove(item);
			GameObject.Destroy(item);
		}
		// release the memory.
		Resources.UnloadUnusedAssets();
		GC.Collect();
	}
}
