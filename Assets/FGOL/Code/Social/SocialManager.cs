//#define WEIBO_DEFAULT_SERVER

using UnityEngine;
using FGOL.Utilities;
using FGOL.Authentication;
using FGOL.Server;
using System;
//[DGR] No support added yet
//using Definitions;
using FGOL.Events;
using System.Collections.Generic;

public class SocialManager : AutoGeneratedSingleton<SocialManager>
{
    public enum InviteRewardTypes
    {
        Coins,
        Gems,
        Spins
    }

    private SocialSaveSystem m_socialSaveSystem = null;
    private bool m_gameCenterLogInFailed = false;
    private Leaderboards m_leaderBoardsSystem = null;
    private Sharing m_sharingSystem = null;
    private Dictionary<SocialFacade.Network, ISocialSystem> m_socialSystems = null;
    private Messages m_messagesSystem = null;
    private bool m_appResume = false;
    private bool m_pushNotifReceived = false;

    public string SocialSystemName
    {
        get
        {
            return GetSelectedSocialNetwork().ToString();
        }
    }

	public Leaderboards Leaderboards
	{
		get
		{
			return m_leaderBoardsSystem;
		}
	}

    public static void SetSelectedSocialNetwork(SocialFacade.Network newNetwork)
    {
        string newNetworkString = newNetwork.ToString();
        Debug.Log("Setting Default Social Network: " + newNetworkString);
        PlayerPrefs.SetString("SocialNetworkSelected", newNetworkString);

		#if !WEIBO_DEFAULT_SERVER
		GameServerManager.SharedInstance.SetServerLocation(SocialManagerUtilities.GetGeoLocationFromSocialNetwork(newNetwork));
		#endif
    }

    public static SocialFacade.Network GetSelectedSocialNetwork()
    {
        if (PlayerPrefs.HasKey("SocialNetworkSelected"))
        {
            string networkString = PlayerPrefs.GetString("SocialNetworkSelected");
            try
            {
                SocialFacade.Network network = (SocialFacade.Network)Enum.Parse(typeof(SocialFacade.Network), networkString);
                return network;
            }
            catch (Exception)
            {
                Debug.LogError("Failed to parse SocialNetworkSelected PlayerPref: " + networkString);
            }
        }

        //fall back to default
        if (GeoLocation.location == GeoLocation.Location.China)
        {
#if WEIBO
            return SocialFacade.Network.Weibo;
#else
			return SocialFacade.Network.Facebook;
#endif
        }
        else
        {
            return SocialFacade.Network.Facebook;
        }
    }

    public string GetSocialID(SocialFacade.Network network)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        return SocialFacade.Instance.GetSocialID(network);
    }

    public bool WasLoginIncentivised(SocialFacade.Network network)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        return m_socialSaveSystem.WasSocialSystemIncentivised(network);
	}    

    public void Init()
    {
        if (m_socialSaveSystem == null)
        {
            m_socialSaveSystem = new SocialSaveSystem();

            EventManager.Instance.RegisterEvent(Events.PushNotificationReceived, OnPushNotificationReceived);            

            m_leaderBoardsSystem = new Leaderboards();
            m_socialSystems = new Dictionary<SocialFacade.Network, ISocialSystem>();
#if WEIBO
            m_socialSystems.Add(SocialFacade.Network.Weibo, new WeiboSocialSystem());
#else
            m_socialSystems.Add(SocialFacade.Network.Weibo, new NullSocialSystem());
#endif

#if FACEBOOK
            Log("Facebook = FacebookSocialSystem");
            m_socialSystems.Add(SocialFacade.Network.Facebook, new FacebookSocialSystem());
#else
            Log("Facebook = NullSocialSystem");
            m_socialSystems.Add(SocialFacade.Network.Facebook, new NullSocialSystem());
#endif

            m_socialSystems.Add(SocialFacade.Network.GameCenter, new NullSocialSystem());

            m_sharingSystem = new Sharing(m_socialSystems);
            m_messagesSystem = new Messages();

            foreach (KeyValuePair<SocialFacade.Network, ISocialSystem> kv in m_socialSystems)
            {
                kv.Value.Init(m_socialSaveSystem);
            }
        }
    }

    public SocialSaveSystem GetSocialSaveSysten()
    {
        if (m_socialSaveSystem == null)
        {
            Init();
        }

        return m_socialSaveSystem;
    }

    public bool IsUser(SocialFacade.Network network)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        return m_socialSystems[network].IsUser();
	}

    public bool IsLoggedIn(SocialFacade.Network network)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        return m_socialSystems[network].IsLoggedIn();
    }

    public void OnAppResume(bool reauthTimeout)
    {
        if (reauthTimeout)
        {
            SocialFacade.Network network = GetSelectedSocialNetwork();
            Debug.Log("SocialManager (OnAppResume) :: Check Facebook User Auth State!");
            Authenticate(network, delegate() {
                m_messagesSystem.CheckMessagesOnResume();
            });
        }
        else
        {
            m_appResume = true;
            CheckReturningToAppWithPush();
        }
    }

	public void Login(SocialFacade.Network network, Action<bool> onComplete = null, bool syncSave = true, bool repeatAsk = false)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;

		// check if we have a working connection first (our China servers won't work in default location)
		GeoLocation.Location loc = SocialManagerUtilities.GetGeoLocationFromSocialNetwork (network);
        
        PersistenceManager.Popups_OpenLoadingPopup();

        // temp set the server location to wherever we need to test
        GameServerManager.SharedInstance.SetServerLocation (loc);
        GameServerManager.SharedInstance.CheckConnection ((error) => {
            string message = "CheckConnection:";
            if (error == null)
                message += "No Error";
            else
                message += error.ToString();

            Log(message);
            if (error == null)
			{
				Log("WEIBOWEIBO: WORKING CONNECTION! " + network);
				m_socialSystems[network].Login((success)=>{
                    Log("Login in social system " + success);
					if(success)
					{
						Log("WEIBOWEIBO: LOGIN SUCCESS!");
						SetSelectedSocialNetwork(network);
					}

					if(onComplete != null)
						onComplete(success);

				}, syncSave, repeatAsk);
			}
			else
			{
                PersistenceManager.Popups_OpenErrorConnection(network,
                    delegate()
                    {
                        if (onComplete != null)
                        {
                            onComplete(false);
                        }
                    }
                );                
            }
		});
	}

	public void Authenticate(SocialFacade.Network network, Action onComplete = null)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        m_socialSystems[network].Authenticate(onComplete);
	}

	public void IncentiviseLogin(SocialFacade.Network network, Action onComplete = null)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        m_socialSystems[network].IncentiviseLogin(onComplete);
    }

    public void Logout(SocialFacade.Network network, Action onLogout)
    {
		m_leaderBoardsSystem.ClearCache();
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
		m_socialSystems [network].LogOut (onLogout);
    }

    public void LogoutAllNetworks(Action onLoggedOut)
    {
        int networksToLogOutOf = 0;

        Action del = delegate ()
        {
            networksToLogOutOf--;
            if (networksToLogOutOf == 0)
            {
                //finished all logging out
                onLoggedOut();
            }
        };

        for (SocialFacade.Network network = SocialFacade.Network.Facebook; network < SocialFacade.Network.Default; network++)
        {
            if (m_socialSystems[network].IsLoggedIn())
            {
                networksToLogOutOf++;
                m_socialSystems[network].LogOut(del);
            }
        }

        if (networksToLogOutOf == 0)
        {
            onLoggedOut();
        }
    }

    public void GetProfileInfo(SocialFacade.Network network, Action<string> onGetName, Action<Texture2D> onGetImage)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        m_socialSystems[network].GetProfileInfo(onGetName, onGetImage);
    }

    public void CheckMessagesOnResume()
    {
        m_messagesSystem.CheckMessagesOnResume();
    }

    public void CheckMessages(Action<Messages.Message[]> onCheckMessage)
    {
        m_messagesSystem.CheckMessages(onCheckMessage);
    }

    public void ClearMessages(string[] messageIDsToClear, Action<bool> onClearMessages)
    {
        m_messagesSystem.ClearMessages(messageIDsToClear, onClearMessages);
    }

	public void SendMessage(string recipient, string giftType, Action<bool> onSendMessages)
	{
		m_messagesSystem.SendMessage(recipient, giftType, onSendMessages);
	}

    public void InviteFriends(SocialFacade.Network network, Action<int> onInviteFriends = null)
    {
        m_socialSystems[network].InviteFriends(onInviteFriends);
    }

	public int GetMessageNotificationCount()
	{
		return m_messagesSystem.GetMessageNotificationsCount;
    }

    public bool ShowInviteRewardPopup( Action onClosePopup = null )
    {
        return m_messagesSystem.DisplayInviteRewardMessagePopup( onClosePopup );
    }

    public void ShowGiftRewardPopup()
    {
        m_messagesSystem.DisplayGiftMessagePopup();
    }


    public void ShareScore(SocialFacade.Network network, int score, string levelKey, string sharkKey, Action onComplete)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        m_sharingSystem.ShareScore(network, score, levelKey, sharkKey, onComplete);
    }

    public void ShareSharkPicture(SocialFacade.Network network, byte[] sharkPic, string sharkKey, Action onComplete)
    {
        network = network == SocialFacade.Network.Default ? GetSelectedSocialNetwork() : network;
        m_sharingSystem.ShareSharkPicture(network, sharkPic, sharkKey, onComplete);
    }

    public void GameServicesLogin()
    {
        if (!GameServicesFacade.Instance.IsLoggedIn() && !m_gameCenterLogInFailed)
        {
            GameServicesFacade.Instance.Authenticate(delegate (bool loggedIn)
            {
                m_gameCenterLogInFailed = !loggedIn;

                if (loggedIn)
                {
                    m_leaderBoardsSystem.Init();
                }

				// Raise event to notify listeners that GameServices were initialized
				EventManager.Instance.TriggerEvent(Events.OnGameServicesInitialized, loggedIn);

                Debug.Log("SocialManager (GameServicesLogin) :: Log in state - " + loggedIn);
            });
        }
    }

    public void RecordUserScore(int score, int playTime)
    {
        m_leaderBoardsSystem.RecordUserScore(score, playTime);
    }

    public void GetLeaderboard(string level, Action<SocialManagerUtilities.ConnectionState, Leaderboards.LeaderboardEntry[]> onGetLeaderboard)
    {
        m_leaderBoardsSystem.GetLeaderboard(level, onGetLeaderboard);
    }

    public void GetFriendSharks(Action<SocialManagerUtilities.ConnectionState, Leaderboards.SharkEntry[]> onGetFriendsSharks)
    {
        m_leaderBoardsSystem.GetFriendSharks(onGetFriendsSharks);
    }

    private void CheckReturningToAppWithPush()
    {
        if (m_appResume && m_pushNotifReceived)
        {
            m_appResume = false;
            m_pushNotifReceived = false;

            m_messagesSystem.CheckMessagesOnResume();
        }
    }

    private void OnPushNotificationReceived(Enum eventType, object[] args)
    {
        m_pushNotifReceived = true;
        CheckReturningToAppWithPush();
    }
    
    public void UpdateLastTimeNewsFeedVisited( DateTime newDate )
    {
        m_socialSaveSystem.SetLastTimeNewsFeedWasVisited(newDate);
    }

    public DateTime GetLastTimeNewsFeedVisited( )
    {
        return m_socialSaveSystem.GetLastTimeNewsFeedWasVisited();
    }

    public void SetGiftDate(string socialID, DateTime newDate)
    {
        m_socialSaveSystem.SetGiftDate(socialID,newDate);
    }

    public DateTime GetGiftDate(string socialID )
    {
        return m_socialSaveSystem.GetGiftDate(socialID);
    }

    public void ResetAllGiftDates( )
    {
        m_socialSaveSystem.ResetAllGiftDates();
    }
    
    public void SaveSocialSaveSystem( )
    {
        SaveFacade.Instance.Save(m_socialSaveSystem.name); 
    }

    #region log
    private void Log(string message)
    {
        Debug.Log("Debug.Log: " + message);
        Facebook.Unity.FacebookLogger.Info("FB.Info: " + message);
        Facebook.Unity.FacebookLogger.Log("FB.Log: " + message);
    }
    #endregion
}