/*using Definitions;
using FGOL.Authentication;
using FGOL.Save;
using FGOL.Server;
using FGOL.Utilities;
using FGOL;
using System;
using System.Collections.Generic;
using UnityEngine;

public class SocialManagerOLD : AutoGeneratedSingleton<SocialManager>
{
    public enum InviteRewardTypes
    {
        Coins,
        Gems,
        Spins
    }

    private Dictionary<SocialFacade.Network, Dictionary<string, string>> m_socialFriendsList = new Dictionary<SocialFacade.Network, Dictionary<string,string>>();
    private Dictionary<SocialFacade.Network, Dictionary<string, SocialFriend>> m_gameFriendsList = new Dictionary<SocialFacade.Network, Dictionary<string, SocialFriend>>();

    private Dictionary<SocialFacade.Network, bool> m_friendsUpdating = new Dictionary<SocialFacade.Network, bool>
    {
        { SocialFacade.Network.Facebook, false }
    };

    private Dictionary<SocialFacade.Network, List<Action>> m_onFriendsUpdated = new Dictionary<SocialFacade.Network, List<Action>> 
    {
        { SocialFacade.Network.Facebook, new List<Action>() }
    };

    /**
     * Saved to SaveData
     *
    private string m_lastInviteRewardDay = null;
    private int m_inviteRewardTally = 0;

    /**
     * GameDB info
     *
    //TODO get from GameDB
    private bool m_gameDBInfoInited = false;

    private InviteRewardTypes m_inviteRewardType = InviteRewardTypes.Coins;
    private int m_inviteRewardAmount = 50;
    private InviteRewardTypes m_inviteAcceptedRewardType = InviteRewardTypes.Spins;
    private int m_inviteAcceptedRewardAmount = 5;

    public void Init()
    {
        /*SaveFacade.Instance.OnLoaded += Load;
        SaveFacade.Instance.OnSaveAll += OnSaveAll;*
    }

    public void InviteFriends(SocialFacade.Network network, Action<string[]> onFriendInvite = null)
    {
        if(AuthManager.Instance.IsAuthenticated() && SocialFacade.Instance.IsLoggedIn(network))
        {
#if UNITY_EDITOR
            //TODO May need a safer way of doing this!
            //Disable input in current state
            GameObject gameObj = PopupState.GetParentForPopup();

            Util.SetInteractablesEnabled(gameObj, false, "UI");
#endif

            SocialFacade.Instance.InviteFriends(network, "Invite friends to HSX", delegate(string requestId, string[] friendIds)
            {
                if(onFriendInvite != null)
                {
                    onFriendInvite(friendIds);
                }
#if UNITY_EDITOR
                Util.SetInteractablesEnabled(gameObj, true, "UI");
#endif
            });
        }
        else
        {
            Debug.LogWarning("SocialManager :: (InviteFriends) No social authentication!");
        }
    }

    public void UpdateFriendsList(Action onUpdateComplete = null)
    {
        Action completed = delegate()
        {
            if(onUpdateComplete != null)
            {
                onUpdateComplete();
            }
        };

        if(AuthManager.Instance.IsAuthenticated())
        {
            UpdateNetworkFriendsList(SocialFacade.Network.Facebook, delegate() 
            {
                List<string> friendIds = new List<string>();

                foreach(KeyValuePair<string, string> pair in m_socialFriendsList[SocialFacade.Network.Facebook])
                {
                    friendIds.Add(pair.Key);
                }

                HSXServer.Instance.UpdateFriendsList(
                    new Dictionary<string, string[]> 
                    {
                        { SocialFacade.Network.Facebook.ToString(), friendIds.ToArray() }
                    },
                    delegate(Dictionary<string, object> friendsList)
                    {
                        //TODO if we are doing multiple netowrks for friends then we may need a new way of getting a friend list
                        if(friendsList != null)
                        {
                            foreach(KeyValuePair<string, object> networkFriends in friendsList)
                            {
                                try
                                {
                                    SocialFacade.Network network = (SocialFacade.Network)Enum.Parse(typeof(SocialFacade.Network), networkFriends.Key);

                                    if(!m_gameFriendsList.ContainsKey(network))
                                    {
                                        m_gameFriendsList[network] = new Dictionary<string, SocialFriend>();
                                    }

                                    Dictionary<string, object> networkList = networkFriends.Value as Dictionary<string, object>;

                                    foreach(KeyValuePair<string, object> friend in networkList)
                                    {
                                        if(!m_gameFriendsList[network].ContainsKey(friend.Key))
                                        {
                                            m_gameFriendsList[network].Add(friend.Key, new SocialFriend(network, friend.Key, friend.Value as string, m_socialFriendsList[network][friend.Key]));
                                        }
                                    }
                                }
                                catch(Exception) { }
                            }
                        }

                        completed();
                    }
                );
            });
        }
        else
        {
            Debug.LogWarning("SocialManager :: (UpdateFriendsList) No authenticated user!");
            completed();
        }
    }

    public void GetFriendList(Action<SocialFriend[]> onGetFriendList)
    {
        Action<bool> checkFriendsList = null;
        checkFriendsList = delegate(bool updateFriendList)
        {
            if(m_gameFriendsList.Count > 0)
            {
                List<SocialFriend> friendList = new List<SocialFriend>();

                foreach(KeyValuePair<SocialFacade.Network, Dictionary<string, SocialFriend>> networkList in m_gameFriendsList)
                {
                    foreach(KeyValuePair<string, SocialFriend> friend in networkList.Value)
                    {
                        friendList.Add(friend.Value);
                    }
                }

                onGetFriendList(friendList.ToArray());
            }
            else
            {
                if(updateFriendList)
                {
                    //TODO if we move to multiple social network we will have to update multiple lists at once
                    UpdateNetworkFriendsList(SocialFacade.Network.Facebook, delegate()
                    {
                        checkFriendsList(false);
                    });
                }
                else
                {
                    onGetFriendList(null);
                }
            }
        };

        checkFriendsList(true);
    }

    public void GetFriend(SocialFacade.Network network, string socialID, Action<SocialFriend> onGetFriend)
    {
        Action<bool> checkFriendsList = null;
        checkFriendsList = delegate(bool updateFriendList)
        {
            if(m_gameFriendsList.ContainsKey(network))
            {
                if(m_gameFriendsList[network].ContainsKey(socialID))
                {
                    onGetFriend(m_gameFriendsList[network][socialID]);
                }
                else
                {
                    onGetFriend(null);
                }
            }
            else
            {
                if(updateFriendList)
                {
                    UpdateNetworkFriendsList(network, delegate()
                    {
                        checkFriendsList(false);
                    });
                }
                else
                {
                    onGetFriend(null);
                }
            }
        };

        checkFriendsList(true);
    }

    public void RecordUserActivity(SocialActivity activity)
    {
        if(AuthManager.Instance.IsAuthenticated())
        {
            HSXServer.Instance.RecordUserActivity(activity.GetActivityType(), activity.GetActivityParams(), delegate() 
            {
                Debug.Log("SocialManager :: Recorded user activity - " + activity.GetActivityType());
            });
        }
        else
        {
            Debug.LogWarning("SocialManager :: (RecordUserActivity) No authenticated user!");
        }
    }

    public void GetNewsFeed(Action<SocialActivity[]> onGetNewsFeed)
    {
        List<SocialActivity> activities = new List<SocialActivity>();

        if(AuthManager.Instance.IsAuthenticated())
        {
            HSXServer.Instance.GetNewsFeed(delegate(List<object> newsFeed)
            {
                if(newsFeed != null)
                {
                    foreach(object act in newsFeed)
                    {
                        Dictionary<string, object> jsonActivity = act as Dictionary<string, object>;

                        if(jsonActivity != null && jsonActivity.ContainsKey("type"))
                        {
                            string type = jsonActivity["type"] as string;

                            SocialActivity activity = null;

                            switch(type)
                            {
                                case "Invite":
                                    activity = new InviteActivity(jsonActivity);
                                    break;
                                case "Joined":
                                    activity = new JoinedActivity(jsonActivity);
                                    break;
                            }

                            if(activity != null)
                            {
                                activities.Add(activity);
                            }
                        }
                    }
                }

                onGetNewsFeed(activities.ToArray());
            });
        }
        else
        {
            Debug.LogWarning("SocialManager :: (GetNewsFeed) No authenticated user!");
            onGetNewsFeed(activities.ToArray());
        }
    }

    public void GetMessages(Action<SocialActivity[], ShareReward[]> onGetMessages)
    {
        if(AuthManager.Instance.IsAuthenticated())
        {
            HSXServer.Instance.GetMessages(delegate(List<object> messages)
            {
                List<SocialActivity> activities = new List<SocialActivity>();
                List<ShareReward> rewards = new List<ShareReward>();

                if(messages != null)
                {
                    foreach(object messageObj in messages)
                    {
                        Dictionary<string, object> message = messageObj as Dictionary<string, object>;

                        if(message != null)
                        {
                            //TODO handle different messages better
                            string messageType = message["messageType"] as string;

                            switch(messageType)
                            {
                                case "InvSuccess":
                                    activities.Add(new InviteAcceptedActivity(message));
                                    break;
                                case "ShareReward":
                                    rewards.Add(new ShareReward(message));
                                    break;
                            }
                        }
                    }
                }

                onGetMessages(activities.ToArray(), rewards.ToArray());
            });
        }
        else
        {
            Debug.LogWarning("SocialManager :: (GetMessages) No authenticated user!");
            onGetMessages(null, null);
        }
    }

    public void ClaimInviteAcceptedReward(string messageID, Action<bool> onClaimed)
    {
        GetGameDBInfo();

		SharkProgress sharkProgress = App.Instance.PlayerProgress.GetSharkProgress(App.Instance.PlayerProgress.GetActiveSharkKey(), true);

		HSXServer.Instance.DeleteMessages(new string[]{ messageID }, delegate(Error error)
        {
            if(error == null)
            {
                //TODO localize and get correct string based on type
                string title = "Invite Accepted!";
                string description = string.Format("You have received {0} {1} because your friend accepted your invite!",
                    m_inviteAcceptedRewardAmount, m_inviteAcceptedRewardType);

                switch(m_inviteAcceptedRewardType)
                {
                    case InviteRewardTypes.Coins:
                        App.Instance.Bank.AddCoins(m_inviteAcceptedRewardAmount);
						HSXAnalyticsManager.Instance.CurrencyEarned(App.Instance.PlayerProgress.GetActiveSharkKey(), sharkProgress.currentLevel, "InviteReward", "Facebook", Bank.CurrencyType.Coins, m_inviteAcceptedRewardAmount);
						break;
                    case InviteRewardTypes.Spins:
                        App.Instance.Bank.AddSpins(m_inviteAcceptedRewardAmount);
						HSXAnalyticsManager.Instance.CurrencyEarned(App.Instance.PlayerProgress.GetActiveSharkKey(), sharkProgress.currentLevel, "InviteReward", "Facebook", Bank.CurrencyType.Spins, m_inviteAcceptedRewardAmount);
						break;
                    case InviteRewardTypes.Gems:
                        App.Instance.Bank.AddGems(m_inviteAcceptedRewardAmount);
						HSXAnalyticsManager.Instance.CurrencyEarned(App.Instance.PlayerProgress.GetActiveSharkKey(), sharkProgress.currentLevel, "InviteReward", "Facebook", Bank.CurrencyType.Gems, m_inviteAcceptedRewardAmount);
						break;
                }

				GameStateMachine.Instance.Push("SocialRewardPopup", State.ExitBehaviour.DisableInput, PopupState.GetParentForPopup(), m_inviteAcceptedRewardType, title, description);

                onClaimed(true);
            }
            else
            {
                //TODO check for connection error
                onClaimed(false);
                //MessageBoxPopup.OpenConfirmPopup("Error claiming reward", "We were unable to claim your reward! Please try again!", true); 
            }
        });
    }

    public void RewardInvites(Dictionary<string, object> inviteInfo)
    {
        GetGameDBInfo();

        DateTime now = DateTime.Now;
        string today = now.ToString("yyyy-MM-dd");

        if(today != m_lastInviteRewardDay)
        {
            //TODO consider using invite info?
            //TODO localize and get correct string based on type
            string title = "Daily Invite Reward";
            string description = string.Format("You have received {0} {1}! Invite Rewards are only available once a day but you will receive extra rewards when your invitations are accepted!",
                m_inviteRewardAmount, m_inviteRewardType);

            switch(m_inviteRewardType)
            {
                case InviteRewardTypes.Coins:
                    App.Instance.Bank.AddCoins(m_inviteRewardAmount);
                    break;
                case InviteRewardTypes.Spins:
                    App.Instance.Bank.AddSpins(m_inviteRewardAmount);
                    break;
                case InviteRewardTypes.Gems:
                    App.Instance.Bank.AddGems(m_inviteRewardAmount);
                    break;
            }

            GameStateMachine.Instance.Push("SocialRewardPopup", State.ExitBehaviour.DisableInput, PopupState.GetParentForPopup(), m_inviteRewardType, title, description);

            m_lastInviteRewardDay = today;
            Save();
        }
    }

    public void ShareFinSpinReward()
    {
        this.GetFriendList(delegate(SocialFriend[] friendList)
        {
            List<string> friends = new List<string>();

            foreach(SocialFriend friend in friendList)
            {
                friends.Add(friend.ID);
            }
    
            HSXServer.Instance.ShareFinSpinReward(friends.ToArray());
        });
    }

    public void ClaimFinSpinReward(int reward, string[] messageIDs, Action<bool> onClaimed)
    {
        HSXServer.Instance.DeleteMessages(messageIDs, delegate(Error error) 
        {
            if(error == null)
            {
                App.Instance.Bank.AddCoins(reward);
                onClaimed(true);

                //TODO Localization
                string description = string.Format("You earnt {0} Coins from rewards shared by your friends!", reward);

                GameStateMachine.Instance.Push("SocialRewardPopup", State.ExitBehaviour.DisableInput, PopupState.GetParentForPopup(), m_inviteRewardType, "Community Chest Reward", description);
            }
            else
            {
                onClaimed(false);
                //MessageBoxPopup.OpenConfirmPopup("Error claiming reward", "We were unable to claim your reward! Please try again!", true); 
            }
        });
    }

    private void UpdateNetworkFriendsList(SocialFacade.Network network, Action onUpdate)
    {
        if (!m_friendsUpdating[network])
        {
            m_friendsUpdating[network] = true;

            Action completed = delegate()
            {
                foreach(Action callback in m_onFriendsUpdated[network])
                {
                    callback();
                }

                m_friendsUpdating[network] = false;
                m_onFriendsUpdated[network].Clear();
            };

            m_onFriendsUpdated[network].Add(onUpdate);

            if(SocialFacade.Instance.IsLoggedIn(network))
            {
                SocialFacade.Instance.GetFriends(network, delegate(Dictionary<string, string> friends)
                {
                    if(friends != null && friends.Count > 0)
                    {
                        m_socialFriendsList[network] = friends;
                    }
                    
                    completed();
                });
            }
            else
            {
                Debug.LogWarning("SocialManager :: (UpdateNetworkFriendsList) No authenticated user for network: " + network);
                completed();
            }
        }
        else
        {
            m_onFriendsUpdated[network].Add(onUpdate);
        }
    }

    private void Load()
    {
        /*SaveData data = SaveFacade.Instance.saveData;

        m_lastInviteRewardDay = data["Social.Invites.LastRewardDay"] as string;
        m_inviteRewardTally = Convert.ToInt32(data["Social.Invites.RewardTally"]);*
    }

    private void OnSaveAll()
    {
        Save(false);
    }

    private void Save(bool instant = true)
    {
        /*SaveData data = SaveFacade.Instance.saveData;

        data["Social.Invites.LastRewardDay"] = m_lastInviteRewardDay;
        data["Social.Invites.RewardTally"] = m_inviteRewardTally;

        if(instant)
        {
            SaveFacade.Instance.Save("Social");
        }*
    }

    private void GetGameDBInfo()
    {
        /*if(!m_gameDBInfoInited)
        {
            GameDB gameDB = GameDataManager.Instance.gameDB;

            IncentivisedInviteData inviteReward = gameDB.GetItem<IncentivisedInviteData>(IncentivisedInviteData.KeyInvite);

            m_inviteRewardType = inviteReward.type;
            m_inviteRewardAmount = inviteReward.value;

            IncentivisedInviteData inviteAcceptedReward = gameDB.GetItem<IncentivisedInviteData>(IncentivisedInviteData.KeyInviteAccepted);

            m_inviteAcceptedRewardType = inviteAcceptedReward.type;
            m_inviteAcceptedRewardAmount = inviteAcceptedReward.value;

            m_gameDBInfoInited = true;
        }*
    }
}*/