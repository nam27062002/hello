using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using FGOL.Utilities;

public class ResourceLoaderManager : AutoGeneratedSingleton<ResourceLoaderManager>
{
	public class ResourceData
	{
		[System.Flags]
		public enum MemoryKeepMode
		{
			dontKeepReference=0,
			discardEveryTime=1,
			discardAtNewLevel=2,
			keepAlwaysInMemory=3
		}
		public MemoryKeepMode keepInMemoryMode;
		public string resourcePath;
		public UnityEngine.Object prefab;

		public ResourceData(string path,MemoryKeepMode memMode)
		{
			resourcePath=path;
			keepInMemoryMode=memMode;
			prefab=null;
		}

		public  bool IsSet( MemoryKeepMode flags)
		{
			return (keepInMemoryMode & flags) == flags;
		}
		
		public  bool IsNotSet( MemoryKeepMode flags)
		{
			return (keepInMemoryMode & (~flags)) == 0;
		}
	}

	private string currentLevelId="";
	private bool cacheOption = true;
	private Dictionary<string,ResourceData>resources=new Dictionary<string,ResourceData>();

	public void SetCurrentLevel(string levelId,bool cacheOption=true)
	{
		if (currentLevelId == levelId)
		{
			UnloadUnusedData (ResourceData.MemoryKeepMode.discardEveryTime);
			return;
		}
		UnloadUnusedData (ResourceData.MemoryKeepMode.discardAtNewLevel | ResourceData.MemoryKeepMode.discardEveryTime);
		currentLevelId = levelId;
		this.cacheOption = cacheOption;
	}

	private void UnloadUnusedData(ResourceData.MemoryKeepMode mode)
	{
		List<string> removeList = new List<string> ();
		foreach(ResourceData data in resources.Values)
		{
			if (data.IsSet(mode))removeList.Add(data.resourcePath);
		}
		for (int i=0; i<removeList.Count; i++) 
		{
			resources.Remove(removeList[i]);
		}
		Resources.UnloadUnusedAssets ();
	}
	
	private void AddResource(string refName,UnityEngine.Object prefab,ResourceData.MemoryKeepMode keepInMemoryMode)
	{
		ResourceData data = new ResourceData (refName,keepInMemoryMode);
		data.prefab= prefab;
		resources [refName] = data;
	}

	public T Load<T>(string refName,ResourceData.MemoryKeepMode keepInMemoryMode=ResourceData.MemoryKeepMode.dontKeepReference)where T:UnityEngine.Object
	{
		if(cacheOption && resources.ContainsKey(refName))
		{
			return (T)resources[refName].prefab;
		}
		UnityEngine.Object prefab= Resources.Load<T>(refName);
		if(cacheOption && keepInMemoryMode!=ResourceData.MemoryKeepMode.dontKeepReference)
		{
			AddResource(refName,prefab,keepInMemoryMode);
		}
		return (T)prefab;
	}

	public UnityEngine.Object Load(string refName,ResourceData.MemoryKeepMode keepInMemoryMode=ResourceData.MemoryKeepMode.dontKeepReference)
	{
		if(cacheOption && resources.ContainsKey(refName))
		{
			return resources[refName].prefab;
		}

		UnityEngine.Object prefab= Resources.Load(refName);
		if (cacheOption && keepInMemoryMode != ResourceData.MemoryKeepMode.dontKeepReference) 
		{
			AddResource(refName,prefab,keepInMemoryMode);
		}
		return prefab;
	}
	
	public UnityEngine.Object Load(string refName,System.Type type,ResourceData.MemoryKeepMode keepInMemoryMode=ResourceData.MemoryKeepMode.dontKeepReference)
	{
		if(cacheOption &&resources.ContainsKey(refName))
		{
			return resources[refName].prefab;
		}
		UnityEngine.Object prefab= Resources.Load(refName,type);
		if(cacheOption && keepInMemoryMode!=ResourceData.MemoryKeepMode.dontKeepReference)
		{
			AddResource(refName,prefab,keepInMemoryMode);
		}
		return prefab;
	}
}
