namespace FGOL.Utilities
{
	// A Monolithic state keeper class
	public class AutoGeneratedSingleton<T> where T : AutoGeneratedSingleton<T>, new()
    {
        private static T m_instance = null;
        private static object _lock = new object();

        public static T Instance
        {
            get
            {
                lock (_lock)
                {
                    if (m_instance == null)
                    {                        
                        m_instance = new T();
                    }

                    return m_instance;
                }
            }
        }

        /// <summary>
        /// Delete the singleton instance of this type
        /// </summary>
        public static void DestroyInstance()
        {
            if (m_instance != null)
            {
                m_instance.Destroy();
                m_instance = null;
            }
        }

        /// <summary>
        /// The instance has the chance to clean up
        /// </summary>
        protected virtual void Destroy() {}
    }
}