using UnityEngine;

namespace FGOL.Utilities
{
	// A Monolithic state keeper class that's also a monobehaviour
	public class AutoGeneratedSingletonMonobehaviour<T> : MonoBehaviour where T : AutoGeneratedSingletonMonobehaviour<T>
    {
        private static bool m_isCreated = false;
        private static T m_instance = null;
        private static object _lock = new object();

        public static T Instance
        {
            get
            {
                lock (_lock)
                {
                    if (m_instance == null && !m_isCreated)
                    {
                        T tInScene = GameObject.FindObjectOfType<T>();
                        if (tInScene == null)
                        {
                            GameObject tPrefab = ManagerPrefabLookup.Instance.GetPrefabFromType(typeof(T).ToString());
                            if (tPrefab != null)
                            {
                                GameObject tObj = GameObject.Instantiate(tPrefab) as GameObject;
                                GameObject.DontDestroyOnLoad(tObj);

                                tInScene = tObj.GetComponent<T>();
                                m_isCreated = true;
                            }
                        }
                        m_instance = tInScene;

                        ManagerPrefabLookup.Instance.SetInstanceForType(typeof(T).ToString(), m_instance.gameObject);
                    }
                    return m_instance;
                }
            }
        }
    }
}
