/**
 *
 * Uses json files for configuration
 *
 * Will load development.json/preproduction.json/production.json based on defined environment
 * then will override with any settings in config.json found in the Application.persistentDataPath
 *
 * Example
 * 
 * {
 *      "request": {
 *          "profile": true
 *      }
 * }
 *
 * will be available via Config.Instance["request.profile"]
 *
 **/

using System;
using System.IO;
using System.Collections.Generic;
using UnityEngine;
using FGOL.Common;
using FGOL.Utilities;

namespace FGOL.Configuration
{
    public class Config : AutoGeneratedSingleton<Config>
    {
        private JSONNestedKeyValueStore m_config = null;
        private Dictionary<string, Action<object>> m_updateEvents = null;

        //  Provides RAW JSON from key store
        public string JSON { get { return m_config.ToJSON();  } }

        public Config()
        {
            m_config = new JSONNestedKeyValueStore();
            m_updateEvents = new Dictionary<string, Action<object>>();
        }

        public void Init()
        {
            string configPath = GetConfigFileLoc();

			TextAsset configAsset = ResourceLoaderManager.Instance.Load(configPath) as TextAsset;

            bool baseLoaded = false;

            if (configAsset != null && configAsset.text != null)
            {
                Debug.Log("Config :: Loading config at path: " + configPath);
                baseLoaded = m_config.FromJSON(configAsset.text);
            }
            else
            {
                Debug.LogWarning("Config :: Couldn't find config file for environment - " + configPath);
            }

#if !PRODUCTION
            //If there is a config file in application document path use it to override environment one            
            
            string overrideConfigPath = string.Format("{0}/config.json", FGOL.Plugins.Native.NativeBinding.Instance.GetPersistentDataPath());            

            if (File.Exists(overrideConfigPath))
            {
                Debug.Log("Config :: Loading config at path: " + overrideConfigPath);

                string json = LoadConfigFile(overrideConfigPath);

                if (baseLoaded)
                {
                    m_config.Merge(json);
                }
                else
                {
                    m_config.FromJSON(json);
                }
            }
#endif
        }

        public void RegisterUpdateEvent(string key, Action<object> onEventCallback)
        {
            //This is a debug feature only!
#if !PRODUCTION
            if (m_updateEvents.ContainsKey(key))
            {
                m_updateEvents[key] += onEventCallback;
            }
            else
            {
                m_updateEvents[key] = onEventCallback;
            }
#endif
        }

        public object this[string key]
        {
            get
            {
                return m_config[key];
            }
            set
            {
                m_config[key] = value;

                if (m_updateEvents.ContainsKey(key))
                {
                    m_updateEvents[key](value);
                }
            }
        }

        private string LoadConfigFile(string path)
        {
            string contents = null;

            try
            {
                using(StreamReader rs = new StreamReader(path))
                {
                    contents = rs.ReadToEnd();
                }
            }
            catch(Exception) { }

            return contents;
        }

        private string GetConfigFileLoc()
        {
            return string.Format("Config/{1}", Application.dataPath, Globals.GetEnvironment());
        }
    }
}