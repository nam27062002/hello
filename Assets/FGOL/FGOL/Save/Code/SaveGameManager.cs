using FGOL.Authentication;
using FGOL.Utilities;
using UnityEngine;
using FGOL.Server;
using System.IO;
using System;
using System.Text;
using System.Collections.Generic;
using FGOL.ThirdParty.MiniJSON;
using FGOL.Save;
using FGOL.Save.SaveStates;

namespace FGOL.Save
{
    public class SaveGameManager : AutoGeneratedSingleton<SaveGameManager>
    {
        public struct CloudSyncStatus
        {
            public bool cloudSaveAvailable;
            public string key;
            public string device;
            public int timestamp;
        }

        //[DGR] It has to be a variable instead of a constant so the game can load and save different profiles. It's useful only on development time
        public static string LocalSaveID = "local";

        public Action<ConflictState, object, object, Action<ConflictResult>> onSyncConflict = null;
        public Action<Action<Error, int>> onBeforeUpload = null;
        public Action onAfterUpload = null;

        #region Private Members

        private const string CloudSaveStatusKey = "CloudSaveStatus";

        //m_version needs to reflect the minimum version on the server and the minimum support version of the app
        // [DGR] Version number set here so it will be accessible immediately, which is needed when the persistence profiles editor is used with the game off
        private string m_version = "0.1.1";

        // [DGR] Not supported yet
        //private S3Request m_request = null;

        private SaveData m_saveData = null;
        private bool m_savingEnabled = false;
        private bool m_uploadEnabled = false;

        private User m_syncUser = null;
        private Action<Error, SyncState> m_syncCompleteCallback = null;

        private Dictionary<string, SaveSystem> m_saveSystems = new Dictionary<string, SaveSystem>();
        private SaveGameComparator m_comparator = null;

        #endregion

        #region Public Accessors
        public bool saveEnabled
        {
            get { return m_savingEnabled; }
            set { m_savingEnabled = value; }
        }

        public string Version
        {
            get { return m_version; }
        }

        public SaveData SaveData
        {
            get
            {
                SaveData data = m_saveData;

#if UNITY_EDITOR
                if(data == null)
                {
                    Debug.LogWarning("SaveGameManager :: SaveData is NULL, System not initialized or loaded! Returning local SaveData instance for debugging in Editor!");
                    data = new SaveData(LocalSaveID);
                }
#endif

                return data;
            }
        }
        #endregion

        #region Public Methods
        public void Init()
        {
            // [DGR] No support added yet                   
            //m_request = new S3Request();
        }

        public SpaceRequirementResult CheckDiskRequirements(User user)
        {
            string saveID = !string.IsNullOrEmpty(user.saveID) ? user.saveID : LocalSaveID;

            SpaceRequirementResult result = SpaceRequirementResult.PathUnavailable;
            
            //Check if the data path is null!
            if(!string.IsNullOrEmpty(FGOL.Plugins.Native.NativeBinding.Instance.GetPersistentDataPath()))            
            {
                //Next try and create an empty save file for the user if one doesn't exist already!
                if(!File.Exists(SaveUtilities.GetSavePath(saveID)))
                {
                    SaveState state = CreateNewSave(user);

                    switch(state)
                    {
                        case SaveState.OK:
                            result = SpaceRequirementResult.OK;
                            break;
                        case SaveState.PermissionError:
                            result = SpaceRequirementResult.PathUnavailable;
                            break;
                        case SaveState.DiskSpace:
                            result = SpaceRequirementResult.OutOfDiskSpace;

							string filePath = SaveUtilities.GetSavePath(saveID);

							// Delete the file as it hasn't been written fully due to insufficient storage
							try
							{
								if(File.Exists(filePath))
								{
									File.Delete(filePath);
								}
							}
							catch(Exception e)
							{
								Debug.LogWarning("SaveGameManager (LoadSave) :: Unable to delete " + filePath + " - " + e.Message);
							}

							break;
                    }
                }
                else
                {
                    //TODO we may have to re-reserve space if the size of the save file as gone up!
                    result = SpaceRequirementResult.OK;
                }
            }

            return result;
        }

        public void RegisterSaveSystem(SaveSystem saveSystem)
        {
            m_saveSystems.Add(saveSystem.name, saveSystem);
        }

        public void UnregisterSaveSystem(SaveSystem saveSystem)
        {
            if (saveSystem != null && m_saveSystems.ContainsKey(saveSystem.name))
            {
                m_saveSystems.Remove(saveSystem.name);
            }
        }

        public void RegisterSaveComparator(SaveGameComparator comparator)
        {
            m_comparator = comparator;
        }

        public void SaveSystems(string saveSystemName)
        {
            if(!string.IsNullOrEmpty(saveSystemName))
            {
                //TODO error on not passing in a valid name for now its allowed for backwards compatibility
                if(m_saveSystems.ContainsKey(saveSystemName))
                {
                    m_saveSystems[saveSystemName].data = m_saveData;
                    m_saveSystems[saveSystemName].Save();
                    m_saveSystems[saveSystemName].Downgrade();
                }
                else
                {
                    Debug.LogWarning("SaveGameManager (SaveSystems) :: Unknown save system name - " + saveSystemName);
                }
            }
            else
            {
                Debug.Log("SaveGameManager (SaveSystems) :: Saving all save systems!");

                foreach(KeyValuePair<string, SaveSystem> pair in m_saveSystems)
                {
                    pair.Value.data = m_saveData;
                    pair.Value.Save();
                    pair.Value.Downgrade();
                }
            }
        }

        public SaveState SaveToDisk()
        {
            SaveState state = SaveState.Disabled;

            //Only save if we can and we are allowed!
            if(m_saveData != null && m_savingEnabled)
            {
                state = m_saveData.Save();
            }

            return state;
        }

        public void Upload(User user, Action<Error> callback)
        {
            if(user != null && !string.IsNullOrEmpty(user.ID))
            {
                Debug.Log("SaveGameManger (Upload) :: Uploading to cloud!");
                UploadSave(user, m_saveData, callback);
            }
            else
            {
                Debug.Log("SaveGameManger (Upload) :: Can't Upload for a local user!");
                callback(new SyncError("Can't upload for local user!"));
            }
        }

        public LoadState Load(User user)

        {

            return LoadSave(user, out m_saveData);

        }

        public void SyncCloudSave(User user, Action<Error, SyncState> callback)
        {
            m_syncUser = user;
            m_syncCompleteCallback = callback;
            m_uploadEnabled = true;
            m_saveData = null;

            if(user.cloudCredentials.isValid)
            {
                // [DGR] SERVER: Do we need to receive this from server?
                //if (!string.IsNullOrEmpty(user.cloudSaveBucket) && !string.IsNullOrEmpty(user.cloudSaveLocation))
                {
                    Authenticator.Instance.GetServerTime(delegate (Error getTimeError, string dateTimeNow, int unixTimestamp)
                    {
                        if (getTimeError == null)
                        {
                            SaveData localSave = null;
                            LoadState localResult = LoadSave(user, out localSave);

                            //We consider a local version mismatch as a corrupted save as it shouldn't be possible to have a local save with a version mistmatch unless
                            //the user has downgraded which is usually something only developers do
                            if (localResult == LoadState.VersionMismatch)
                            {
                                Debug.LogError("SaveGameManager (SyncCloudSave) :: Version mismatch with local save! Marking as corrupt!");

                                //TODO determine if we should handle local downgrades
                                localResult = LoadState.Corrupted;
                            }

                            //First thing to do is download the cloud save if this fails then we just continue as if offline
                            GameServerManager.SharedInstance.GetPersistence(delegate (Error error, Dictionary<string, object> response)
                            //m_request.DownloadFile(user.cloudSaveBucket, user.cloudSaveLocation, user.cloudCredentials.values, unixTimestamp, user.cloudCredentials.expiry, delegate (Error error, byte[] data)
                            {
                                if (error == null)
                                {                                   
                                    SaveData cloudSave = new SaveData(user.saveID);
                                    //LoadState cloudResult = cloudSave.LoadFromStream(new MemoryStream(data));
                                    string persistence = response["response"] as string;
                                    LoadState cloudResult = cloudSave.LoadFromString(persistence);

                                    //Now we have the raw save data load it through the systems
                                    if (cloudResult == LoadState.OK)
                                    {
                                        if (CheckVersions(cloudSave.Version) != -1)
                                        {
                                            bool upgraded = false;
                                            cloudResult = UpgradeSystems(cloudSave, out upgraded);

                                            if (cloudResult == LoadState.OK)
                                            {
                                                cloudResult = LoadSystems(cloudSave);
                                            }
                                        }
                                        else
                                        {
                                            cloudResult = LoadState.VersionMismatch;
                                        }
                                    }

                                    if (localResult == LoadState.OK && cloudResult == LoadState.OK)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Both local and cloud save are OK");

                                        //Both local and cloud okay so now decide on which should override which!
                                        CompareSaves(user, localSave, cloudSave);
                                    }
                                    else if (localResult == LoadState.OK && cloudResult == LoadState.Corrupted)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Local OK, Cloud Corrupted");

                                        //Cloud save was corrupted so show conflict dialog with the ability to only choose local save and override
                                        m_comparator.CompareSaves(localSave, null);
                                        onSyncConflict(ConflictState.CloudSaveCorrupt, m_comparator.GetLocalProgress(), null, delegate(ConflictResult conflictResult){

                                            ResolveConflict(conflictResult, localSave, cloudSave);

                                        });
                                    }
                                    else if (localResult == LoadState.OK && cloudResult == LoadState.VersionMismatch)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Local OK, Cloud Newer");

                                        //Cloud save is newer and we can't deal with it so show upgrade needed and disable cloud saving
                                        m_uploadEnabled = false;
                                        m_syncCompleteCallback(null, SyncState.UpgradeNeeded);
                                    }
                                    else if (localResult == LoadState.Corrupted && cloudResult == LoadState.OK)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Local Corrupted, Cloud OK");

                                        m_comparator.CompareSaves(null, cloudSave);

                                        //The local save is corrupted so show the conflict dialog with the ability to only choose cloud save and override
                                        onSyncConflict(ConflictState.LocalSaveCorrupt, null, m_comparator.GetCloudProgress(), delegate (ConflictResult conflictResult) {

                                            ResolveConflict(conflictResult, localSave, cloudSave);

                                        });
                                    }
                                    else if (localResult == LoadState.Corrupted && cloudResult == LoadState.VersionMismatch)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Local Corrupted, Cloud Newer");

                                        m_uploadEnabled = false;
                                        onSyncConflict(ConflictState.LocalCorruptUpgradeNeeded, null, null, delegate (ConflictResult conflictResult) {

                                            ResolveConflict(conflictResult, localSave, cloudSave);

                                        });
                                    }
                                    else if (localResult == LoadState.Corrupted && cloudResult == LoadState.Corrupted)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Both Local and Cloud Corrupted");

                                        //Both are corrupt
                                        m_uploadEnabled = false;
                                        m_syncCompleteCallback(null, SyncState.Corrupted);
                                    }
                                    else if (localResult == LoadState.PermissionError)
                                    {
                                        Debug.Log("SaveGameManager (SyncCloudSave) :: Both Local permission error");

                                        //There are permission errors with the local save so we need to inform user and disable saving until this is sorted
                                        m_uploadEnabled = false;
                                        m_savingEnabled = false;
                                        m_syncCompleteCallback(null, SyncState.PermissionError);
                                    }
                                    else
                                    {
                                        Debug.LogError(string.Format("Unsupported sync state! Local state {0}, Corrupt state {1}", localResult, cloudResult));

                                        m_uploadEnabled = false;
                                        m_savingEnabled = false;
                                        m_syncCompleteCallback(null, SyncState.Error);
                                    }
                                }
                                else if (error.GetType() == typeof(FileNotFoundError))
                                {
                                    Debug.Log("SaveGameManager (SyncCloudSave) :: File not found on S3!");

                                    if (localResult == LoadState.OK)
                                    {
                                        CloudSyncStatus status = GetCloudSyncStatus(user);
                                        if (status.cloudSaveAvailable || user.cloudSaveAvailable)
                                        {
                                            m_syncCompleteCallback(null, SyncState.Inaccessible);
                                        }
                                        else
                                        {
                                            //If we have no file in the cloud just upload the local one to get us in-sync
                                            UploadSave(m_syncUser, localSave, delegate (Error uploadError)
                                            {
                                                m_saveData = localSave;
                                                if (error.GetType() != typeof(UploadDisallowedError))
                                                {
                                                    m_syncCompleteCallback(uploadError, uploadError == null ? SyncState.Successful : SyncState.Error);
                                                }
                                                else
                                                {
                                                    m_syncCompleteCallback(null, SyncState.Successful);
                                                }
                                            });
                                        }
                                    }
                                    else
                                    {
                                        m_syncCompleteCallback(null, localResult == LoadState.Corrupted ? SyncState.Corrupted : SyncState.Error);
                                    }
                                }
                                else
                                {
                                    m_syncCompleteCallback(error, SyncState.Error);
                                }
                            });
                        }
                        else
                        {
                            m_syncCompleteCallback(getTimeError, SyncState.Error);
                        }

                    });
                }
                // [DGR] SERVER: Not supported yet                
                /*else
                {
                    m_syncCompleteCallback(new UnknownError("Missing cloud save location or bucket", ErrorCodes.ParamError), SyncState.Error);
                }*/
            }
            else
            {
                m_syncCompleteCallback(new AuthenticationError("Invalid S3 Access Token", ErrorCodes.S3TokenInvalid), SyncState.Error);
            }
        }

        public SaveState CreateNewSave(User user)
        {
            string saveID = !string.IsNullOrEmpty(user.saveID) ? user.saveID : LocalSaveID;

            m_saveData = new SaveData(saveID);            

            //Clear the cloud status as we are making a local change that we want to have conflict with the cloud regardless of if it thinks we synced before
            ClearCloudSyncStatus(user);

            // [DGR] The default progress read from resources is used            
            SimpleJSON.JSONClass newSaveData = PersistenceManager.GetDefaultDataFromProfile(PersistenceProfile.DEFAULT_PROFILE);
            newSaveData = PersistenceManager.GetDefaultDataFromProfile(PersistenceProfile.DEFAULT_PROFILE);
            m_saveData.LoadFromString(newSaveData.ToString());
            m_saveData.Version = m_version;

            return m_saveData.Save(false);
        }

        public CloudSyncStatus GetCloudSyncStatus(User user)
        {
            Dictionary<string, object> cloudSaveStatus = null;

            string cloudSaveStatusString = PlayerPrefs.GetString(CloudSaveStatusKey);

            if(!string.IsNullOrEmpty(cloudSaveStatusString))
            {
                try
                {
                    cloudSaveStatus = Json.Deserialize(cloudSaveStatusString) as Dictionary<string, object>;
                }
                catch (Exception) {}
            }

            CloudSyncStatus status = new CloudSyncStatus();
            status.cloudSaveAvailable = false;

            if(cloudSaveStatus != null && cloudSaveStatus.ContainsKey(user.ID))
            {
                Dictionary<string, object> userStatus = cloudSaveStatus[user.ID] as Dictionary<string, object>;

                if(userStatus != null)
                {
                    status.cloudSaveAvailable = true;
                    status.key = userStatus["Key"] as string;
                    status.device = userStatus["Device"] as string;
                    status.timestamp = Convert.ToInt32(userStatus["ModifiedTime"] as string);
                }
            }

            return status;
        }
        #endregion

        #region Private Methods
        private LoadState LoadSave(User user, out SaveData loadedData)
        {
            m_savingEnabled = false;

            string saveID = !string.IsNullOrEmpty(user.saveID) ? user.saveID : LocalSaveID;
            SaveData save = new SaveData(saveID);
            Func<LoadState> loadSave = null;

            loadSave = delegate() {
                LoadState loadResult = save.Load();

                switch (loadResult)
                {
                    case LoadState.NotFound:
                        if (save.Key != LocalSaveID)
                        {
                            Debug.Log("SaveGameManager (LoadSave) :: Haven't found save for saveID - " + saveID + " attempting to load local.sav instead!");

                            //If the save isn't found and we aren't trying to load a local save already then try to load a local save instead
                            save = new SaveData(LocalSaveID);

                            loadResult = loadSave();

                            if (loadResult == LoadState.OK)
                            {
                                Debug.Log("SaveGameManager (LoadSave) :: Found local.sav! Converting to user save");

                                save.UpdateSavePathAndKey(SaveUtilities.GetSavePath(saveID), saveID);

                                SaveState state = save.Save();

                                //Note: possible save duplication exploit

                                if (state == SaveState.OK)
                                {
                                    //Delete old local.sav when done!
                                    string localSavePath = SaveUtilities.GetSavePath(LocalSaveID);

                                    try
                                    {
                                        if (File.Exists(localSavePath))
                                        {
                                            File.Delete(localSavePath);
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        Debug.LogWarning("SaveGameManager (LoadSave) :: Unable to delete " + localSavePath + " - " + e.Message);
                                    }
                                }
                            }
                        }

                        break;
                }

                return loadResult;
            };

            LoadState result = loadSave();

            Action loadSystems = delegate ()
            {
                if (result == LoadState.OK)
                {
                    result = LoadSystems(save);

                    if (result == LoadState.OK)
                    {
                        m_savingEnabled = true;
                    }
                }
            };

            //Check for valid results and enable saving if we are in a valid state!
            switch (result)
            {
                case LoadState.OK:

                    //Now need to check game systems can load it!
                    bool upgraded = false;
                    result = UpgradeSystems(save, out upgraded);

                    save.Version = m_version;


                    //TODO only save on upgrade

                    if (result == LoadState.OK && upgraded)

                    {

                        SaveToDisk();

                    }

                    loadSystems();
                    break;
                case LoadState.NotFound:
                    Debug.Log("SaveGameManager (LoadSave) :: No save found! Creating new save!");
                    //Create a new save
                    result = LoadState.OK;

                    //[DGR] If persistence hasn't been found then the default persistence should be applied
                    SimpleJSON.JSONNode defaultJson = PersistenceManager.GetDefaultDataFromProfile();
                    save.Merge(defaultJson.ToString());

                    loadSystems();

                    save.Version = m_version;

                    if (result == LoadState.OK)
                    {
                        save.Save();
                    }

                    break;
                default:
                    loadSystems();
                    m_savingEnabled = false;
                    break;
            }


            loadedData = save;


            return result;
        }

        private LoadState UpgradeSystems(SaveData saveData, out bool upgraded)
        {
            LoadState state = LoadState.OK;

            upgraded = false;

            try
            {
                ClearSystems();

                foreach(KeyValuePair<string, SaveSystem> pair in m_saveSystems)
                {
                    pair.Value.data = saveData;
                    if (pair.Value.Upgrade())

                    {

                        upgraded = true;

                    }
                }
            }
            catch(CorruptedSaveException)
            {
                state = LoadState.Corrupted;
            }

            return state;
        }

        private LoadState LoadSystems(SaveData saveData)
        {
            LoadState state = LoadState.OK;

            try
            {
                ClearSystems();

                foreach(KeyValuePair<string, SaveSystem> pair in m_saveSystems)
                {
                    pair.Value.data = saveData;
                    pair.Value.Load();
                }
            }
            catch(CorruptedSaveException)
            {
                state = LoadState.Corrupted;
            }

            return state;
        }

        private void CompareSaves(User user, SaveData localSave, SaveData cloudSave)
        {
            CloudSyncStatus cloudStatus = GetCloudSyncStatus(user);

            if (!cloudStatus.cloudSaveAvailable || cloudStatus.device != cloudSave.DeviceName || cloudStatus.timestamp != cloudSave.Timestamp || cloudStatus.key != cloudSave.Key)
            {
                ConflictState state = m_comparator.CompareSaves(localSave, cloudSave);

                //TODO we don't actually have a perfect way of telling the saves are the same short of analysis absolutely everything in the save
                //so this case should never come up but it is possible to be the cause of missing progress (ie coins / gems) because we didn'y consider
                //them when comparing saves
                if (state == ConflictState.Equal)
                {
                    Debug.Log("SaveGameManager (CompareSaves) :: No change to save data detected just using local");
                    ResolveConflict(ConflictResult.Local, localSave, cloudSave);
                }
                else if (state == ConflictState.UseLocal)
                {
                    Debug.Log("SaveGameManager (CompareSaves) :: Local Save is newer just use local");

                    ResolveConflict(ConflictResult.Local, localSave, cloudSave);
                }
                else if (state == ConflictState.UseCloud)
                {
                    Debug.Log("SaveGameManager (CompareSaves) :: Cloud save is newer just use cloud!");

                    ResolveConflict(ConflictResult.Cloud, localSave, cloudSave);
                }
                else
                {
                    Debug.Log("SaveGameManager (CompareSaves) :: Conflict Found - " + state);

                    onSyncConflict(state, m_comparator.GetLocalProgress(), m_comparator.GetCloudProgress(), delegate(ConflictResult result){

                        ResolveConflict(result, localSave, cloudSave);

                    });
                }
            }
            else
            {
                Debug.Log("SaveGameManager (CompareSaves) :: Cloud save is unchanged since last seen just use local!");

                ResolveConflict(ConflictResult.Local, localSave, cloudSave);
            }
        }

        private void ResolveConflict(ConflictResult result, SaveData localSave, SaveData cloudSave)
        {
            switch(result)
            {
                case ConflictResult.Cloud:
                    Debug.Log("SaveGameManager (ResolveConflict) :: Resolving conflict with cloud save!");

                    if(OverrideLocalSave(cloudSave, localSave))
                    {
						m_comparator.ReconcileData(localSave, cloudSave);

                        cloudSave.Save();

						LoadState cloudState = LoadSystems(cloudSave);
                        if (cloudState == LoadState.OK)
                        {
                            m_saveData = cloudSave;
                            m_syncCompleteCallback(null, SyncState.Successful);
                        }
                        else
                        {
                            //Reset to local
                            LoadSystems(localSave);

                            m_saveData = localSave;
                            //TODO may need more specific errors
                            m_syncCompleteCallback(new SyncError("Failed to load resolved cloud save", ErrorCodes.SaveError), SyncState.Error);
                        }
                    }
                    else
                    {
                        m_syncCompleteCallback(new SyncError("Failed to Override Local Save", ErrorCodes.SaveError), SyncState.Error);
                    }
                    break;
                case ConflictResult.Local:
                    Debug.Log("SaveGameManager (ResolveConflict) :: Resolving conflict with local save!");

					m_comparator.ReconcileData(localSave, cloudSave);

                    localSave.Save();

					LoadState localState = LoadSystems(localSave);
                    if (localState == LoadState.OK)
                    {
                        UploadSave(m_syncUser, localSave, delegate (Error error)
                        {
                            if (error != null && error.GetType() != typeof(UploadDisallowedError))
                            {
                                m_syncCompleteCallback(error, SyncState.Error);
                            }
                            else
                            {
                                m_saveData = localSave;
                                m_syncCompleteCallback(null, SyncState.Successful);
                            }
                        });
                    }
                    else
                    {
                        //TODO may need more specific errors
                        m_syncCompleteCallback(new SyncError("Failed to load resolved cloud save", ErrorCodes.SaveError), SyncState.Error);
                    }

                    break;
            }
        }

        private void RecordCloudSyncStatus(User user, SaveData uploadedSave)
        {
            Dictionary<string, object> cloudSaveStatus = new Dictionary<string, object>();

            string cloudSaveStatusString = PlayerPrefs.GetString(CloudSaveStatusKey);
            
            if(!string.IsNullOrEmpty(cloudSaveStatusString))
            {
                try
                {
                    cloudSaveStatus = Json.Deserialize(cloudSaveStatusString) as Dictionary<string, object>;
                }
                catch (Exception) {}
            }
            
            Dictionary<string, string> userStatus = new Dictionary<string, string>();
            
            userStatus.Add("ModifiedTime", uploadedSave.Timestamp.ToString());
            userStatus.Add("Device", uploadedSave.DeviceName);
            userStatus.Add("Key", uploadedSave.Key);
            
            cloudSaveStatus[user.ID] = userStatus;

            PlayerPrefs.SetString(CloudSaveStatusKey, Json.Serialize(cloudSaveStatus));
            PlayerPrefs.Save();
        }

        private void ClearCloudSyncStatus(User user)
        {
			if (string.IsNullOrEmpty (user.ID))
				return;

            Dictionary<string, object> cloudSaveStatus = null;

            string cloudSaveStatusString = PlayerPrefs.GetString(CloudSaveStatusKey);
            if (!string.IsNullOrEmpty(cloudSaveStatusString))
            {
                try
                {
                    cloudSaveStatus = Json.Deserialize(cloudSaveStatusString) as Dictionary<string, object>;
                }
                catch (Exception) { }
            }

            if (cloudSaveStatus != null && user != null && !string.IsNullOrEmpty(user.ID) && cloudSaveStatus.ContainsKey(user.ID))
            {

                cloudSaveStatus.Remove(user.ID);


                PlayerPrefs.SetString(CloudSaveStatusKey, Json.Serialize(cloudSaveStatus));

                PlayerPrefs.Save();

            }
        }

        private bool OverrideLocalSave(SaveData cloudSave, SaveData localSave)
        {
            bool successful = false;

            //Try save the cloud save
            SaveState state = cloudSave.Save(false);

            if(state == SaveState.OK)
            {
                if(cloudSave.Load() == LoadState.OK)
                {
                    successful = true;
                }
            }
            
            //If cloud save failed save the local again
            if (!successful)
            {
                localSave.Save();
            }

            return successful;
        }

        private void UploadSave(User user, SaveData save, Action<Error> callback)
        {
            Debug.Log("SaveGameManager (UploadLocalSave) :: Uploading local save");

            Action<Error, int> upload = delegate(Error beforeError, int unixTimestamp)
            {
                if (beforeError == null)
                {                    
                    // [DGR] SERVER: Changed to use our own server
                    //using (MemoryStream ms = save.SaveToStream())
                    {
                        //m_request.UploadFile(user.cloudSaveBucket, user.cloudSaveLocation, user.cloudCredentials.values, ms.ToArray(), unixTimestamp, user.cloudCredentials.expiry, delegate (Error error)
                        GameServerManager.SharedInstance.SetPersistence(save.ToString(),
                            delegate (Error error, Dictionary<string, object> response)                        
                            {
                                if (error == null)
                                {
                                    RecordCloudSyncStatus(user, save);

                                    Debug.Log("SaveGameManager (UploadLocalSave) :: Upload to S3 Successful");
                                    callback(null);

                                    if (onAfterUpload != null)
                                    {
                                        onAfterUpload();
                                    }
                                }
                                else
                                {
                                    Debug.LogError("SaveGameManager (UploadLocalSave) :: Failed to sync local file to cloud! Reason: " + error);
                                    callback(error);

                                }
                            }
                        );

                    }
                }
                else
                {
                    Debug.LogError("SaveGameManager (UploadLocalSave) :: Failed before upload step! Reason: " + beforeError);
                    callback(beforeError);
                }
            };

            if(save != null && m_uploadEnabled && m_savingEnabled)
            {
                if(user.cloudCredentials.isValid)
                {
                    // [DGR] SERVER: Not supported yet
                    //if (!string.IsNullOrEmpty(user.cloudSaveBucket) && !string.IsNullOrEmpty(user.cloudSaveLocation))
                    {
                        if (onBeforeUpload != null)
                        {
                            onBeforeUpload(upload);
                        }
                        else
                        {
                            Authenticator.Instance.GetServerTime(delegate (Error getTimeError, string dateTimeNow, int unixTimestamp)
                            {
                                if (getTimeError == null)
                                {
                                    upload(null, unixTimestamp);
                                }
                                else
                                {
                                    callback(getTimeError);
                                }
                            });

                        }
                    }
                    // [DGR] Not supported yet
                    /*
                    else
                    {
                        callback(new UnknownError("Unset cloud save bucket or location", ErrorCodes.ParamError));
                    }*/
                }
                else
                {
                    Debug.LogWarning("SaveGameManager :: Cloud Credentials Invalid!");

                    callback(new AuthenticationError("Cloud credentials invalid", ErrorCodes.S3TokenInvalid));
                }
            }
            else
            {
                Debug.LogWarning(string.Format("SaveGameManager (UploadLocalSave) :: Upload Disabled! uploadEnabled {0}, savingEnabled {1}", m_uploadEnabled, m_savingEnabled));
                callback(new SyncError("Upload Disabled"));
            }
        }

        private void ClearSystems()
        {
            foreach(KeyValuePair<string, SaveSystem> pair in m_saveSystems)
            {
                pair.Value.Reset();
            }
        }

        private int CheckVersions(string version)
        {
            System.Version gameVer = new System.Version(m_version);
            System.Version cloudVer = new System.Version(version);

            return gameVer.CompareTo(cloudVer);
        }
        #endregion

        #region Debug Methods
        public void CorruptedSave(string userID)
        {
#if !PRODUCTION
            string savePath = SaveUtilities.GetSavePath(userID);

            Debug.Log("SaveGameManager (CorruptedSave) :: Corrupting save at path - " + savePath);

            using(FileStream fs = new FileStream(savePath, FileMode.Open, FileAccess.ReadWrite))
            {
                byte[] shit = Encoding.UTF8.GetBytes("Holy shit govenor! I'm corrupting your save file bruv! What ya gonna do bout it? Get a cheeky Nandos?");

                fs.Seek(0, SeekOrigin.Begin);
                fs.Write(shit, 0, shit.Length);
                fs.Flush();
                fs.Close();

                Debug.Log("SaveGameManager (CorruptedSave) :: Save Corrupted");
            }
#endif
        }

        public void DeleteLocalSave(string userID)
        {
#if !PRODUCTION
            string savePath = SaveUtilities.GetSavePath(userID);

            try
            {
                Debug.Log("Delete save at path: " + savePath);
                File.Delete(savePath);
            }
            catch(Exception e) 
            {
                DebugUtils.LogException(e);
            }
#endif
        }
        #endregion
    }
}
