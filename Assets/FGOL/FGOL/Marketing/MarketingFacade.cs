using UnityEngine;
using System.Collections;
using FGOL.Utilities;
using System.Collections.Generic;

namespace FGOL.Marketing
{
    public struct MarketingFacadeInitStruct
    {
        public string AppToken;
        public string AppSecret;
        public string GoogleAppID;
        public bool EnablePushNotifications;

        public bool Valid { get { return AppToken != null && AppSecret != null; } }

        /// <summary>
        /// If enabled Verbose mode will be enabled
        /// </summary>
        public bool TestMode;
    }

	//	Defines reward from marketing 
	public struct MarketingReward
	{
		public string 	Name;
		public int 		Quantity;
	}

	//	Defines purchase data made by marketing offers
	public struct MarketingPurchase
	{
		public string Name;
		public string ProductID;
		public int Quantity;
	}

	//	Event that system recieved reward
	public delegate void MarketingRewardEvent(MarketingReward reward);
	public delegate void MarketingPurchaseEvent(MarketingPurchase purchase);

    /// <summary>
    /// Faceade for marketing access
    /// </summary>
    public class MarketingFacade : AutoGeneratedSingleton<MarketingFacade>
    {
        private MarketingCallbacks m_callbacks = null;

		//	Register to this event to get notifications when user should be rewarded
		public event MarketingRewardEvent OnRewardReceived;
		
		//	Register to this event to get notifications when Marketing wants to initiate a purchase
		public event MarketingPurchaseEvent OnPurchaseMade;

        public MarketingFacade()
        {
        }

        private void InitGameObject()
        {
            //  Create game object with callback script
            if (m_callbacks == null)
            {
                GameObject callbacks = new GameObject("MarketingCallbacks");
                m_callbacks = callbacks.AddComponent<MarketingCallbacks>();
                GameObject.DontDestroyOnLoad(callbacks);
            }
        }

        public void Initialise(MarketingFacadeInitStruct initParam)
        {
            // [DGR] Not supported yet
            /*
#if !UNITY_EDITOR && (UNITY_ANDROID || UNITY_IOS)
            Debug.Log(string.Format("Init marketing facade with AppToken: {0} and AppSecret: {1} and TestMode: {2}", initParam.AppToken, initParam.AppSecret, initParam.TestMode));

            InitGameObject();

            //  Init the SDK            
#if UNITY_ANDROID
            Upsight.init(initParam.AppToken, initParam.AppSecret, initParam.GoogleAppID);
#elif UNITY_IOS
            Upsight.init(initParam.AppToken, initParam.AppSecret);
#endif

            if (initParam.TestMode)
            {
                //  Enable test mode
                Upsight.setLogLevel(UpsightLogLevel.VERBOSE);
            }

            if (initParam.EnablePushNotifications)
            {
                Upsight.registerForPushNotifications();
            }

            Upsight.requestAppOpen();
#endif
            */
        }

        public void SendRequest(string placementName, Dictionary<string, object> dimensions = null, bool showImediately = false, bool showAnimated = true)
        {
            // [DGR] Not supported yet
#if !UNITY_EDITOR && (UNITY_ANDROID || UNITY_IOS) && false
            Upsight.sendContentRequest(placementName, showImediately, showAnimated, dimensions);
#endif
        }

        public void TriggerEvent(MarketingReward reward)
		{
			if (OnRewardReceived != null) 
			{
				OnRewardReceived (reward);
			}
		}

		public void TriggerIAPEvent(MarketingPurchase purchase)
		{
			if (OnPurchaseMade != null)
			{
				OnPurchaseMade (purchase);
			}
		}
	}


}
 